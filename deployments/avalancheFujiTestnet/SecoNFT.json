{
  "address": "0x9D4b1De0289aaB0AbdA6Dde4D780795Ef3B92657",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payloadLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "setGasForDestinationLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_trustedRemote",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "traverseChains",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bf8b1da0eb9f26f0bcc333b889908ec83bcefbaec91cddaf1aa74569944f575",
  "receipt": {
    "to": null,
    "from": "0x65A2175dbc2FC1621E47823788519f25a41E24bb",
    "contractAddress": "0x9D4b1De0289aaB0AbdA6Dde4D780795Ef3B92657",
    "transactionIndex": 3,
    "gasUsed": "4618238",
    "logsBloom": "0x00000000000008000000000000000000000000000000000000800000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000200000000000000000000000000000000000020000000000000000000000000000000040000000000000000000000000000000000",
    "blockHash": "0xe855fd583ab630d4571c57bda84d8103ee0ce2e93bbc651fa0c0148780fc481c",
    "transactionHash": "0x9bf8b1da0eb9f26f0bcc333b889908ec83bcefbaec91cddaf1aa74569944f575",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8982581,
        "transactionHash": "0x9bf8b1da0eb9f26f0bcc333b889908ec83bcefbaec91cddaf1aa74569944f575",
        "address": "0x9D4b1De0289aaB0AbdA6Dde4D780795Ef3B92657",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000065a2175dbc2fc1621e47823788519f25a41e24bb"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe855fd583ab630d4571c57bda84d8103ee0ce2e93bbc651fa0c0148780fc481c"
      }
    ],
    "blockNumber": 8982581,
    "cumulativeGasUsed": "4931898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmQ4p8MQ6idYDG2n2SDFQbqLSkZovkYVhLpT8j5dzM5nVc/",
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706"
  ],
  "numDeployments": 1,
  "solcInputHash": "6df38ba9d2e31ce2a2cd5db7ec456049",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setGasForDestinationLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_trustedRemote\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"traverseChains\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SecoNFT.sol\":\"SecoNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/NonblockingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\\n    ILayerZeroEndpoint internal endpoint;\\n\\n    struct FailedMessages {\\n        uint256 payloadLength;\\n        bytes32 payloadHash;\\n    }\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))\\n        public failedMessages;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event MessageFailed(\\n        uint16 _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _payload\\n    );\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\\n        require(\\n            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\\n                keccak256(_srcAddress) ==\\n                keccak256(trustedRemoteLookup[_srcChainId]),\\n            \\\"NonblockingReceiver: invalid source sending contract\\\"\\n        );\\n\\n        // try-catch all errors/exceptions\\n        // having failed messages does not block messages passing\\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(\\n                _payload.length,\\n                keccak256(_payload)\\n            );\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function onLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public {\\n        // only internal transaction\\n        require(\\n            msg.sender == address(this),\\n            \\\"NonblockingReceiver: caller must be Bridge.\\\"\\n        );\\n\\n        // handle incoming message\\n        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _txParam\\n    ) internal {\\n        endpoint.send{value: msg.value}(\\n            _dstChainId,\\n            trustedRemoteLookup[_dstChainId],\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _txParam\\n        );\\n    }\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external payable {\\n        // assert there is message to retry\\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][\\n            _srcAddress\\n        ][_nonce];\\n        require(\\n            failedMsg.payloadHash != bytes32(0),\\n            \\\"NonblockingReceiver: no stored message\\\"\\n        );\\n        require(\\n            _payload.length == failedMsg.payloadLength &&\\n                keccak256(_payload) == failedMsg.payloadHash,\\n            \\\"LayerZero: invalid payload\\\"\\n        );\\n        // clear the stored message\\n        failedMsg.payloadLength = 0;\\n        failedMsg.payloadHash = bytes32(0);\\n        // execute the message. revert if it fails again\\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)\\n        external\\n        onlyOwner\\n    {\\n        trustedRemoteLookup[_chainId] = _trustedRemote;\\n    }\\n}\\n\",\"keccak256\":\"0xa9dd6893d64e4b602a66375e5e60a87f8e37807a36384c7c00d131c0537ecad6\",\"license\":\"GPL-3.0\"},\"contracts/SecoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\n// File: contracts/interfaces/ILayerZeroEndpoint.sol\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\nimport \\\"./access/Ownable.sol\\\";\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\nimport \\\"./token/ERC721/ERC721.sol\\\";\\n\\n// File: contracts/NonblockingReceiver.sol\\nimport \\\"./NonblockingReceiver.sol\\\";\\n\\n// File: contracts/SecoNFT.sol\\ncontract SecoNFT is Ownable, ERC721, NonblockingReceiver {\\n    address public _owner;\\n    string private baseURI;\\n    uint256 nextTokenId = 0;\\n    uint256 MAX_MINT_ETHEREUM = 3084;\\n\\n    uint256 gasForDestinationLzReceive = 350000;\\n\\n    constructor(string memory baseURI_, address _layerZeroEndpoint)\\n        ERC721(\\\"SecoNFT\\\", \\\"SNFT\\\")\\n    {\\n        _owner = msg.sender;\\n        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\\n        baseURI = baseURI_;\\n    }\\n\\n    // mint function\\n    // you can choose to mint 1 or 2\\n    // mint is free, but payments are accepted\\n    function mint(uint8 numTokens) external payable {\\n        require(numTokens < 3, \\\"GG: Max 2 NFTs per transaction\\\");\\n        require(\\n            nextTokenId + numTokens <= MAX_MINT_ETHEREUM,\\n            \\\"GG: Mint exceeds supply\\\"\\n        );\\n        _safeMint(msg.sender, ++nextTokenId);\\n        if (numTokens == 2) {\\n            _safeMint(msg.sender, ++nextTokenId);\\n        }\\n    }\\n\\n    // This function transfers the nft from your address on the\\n    // source chain to the same address on the destination chain\\n    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {\\n        require(\\n            msg.sender == ownerOf(tokenId),\\n            \\\"You must own the token to traverse\\\"\\n        );\\n        require(\\n            trustedRemoteLookup[_chainId].length > 0,\\n            \\\"This chain is currently unavailable for travel\\\"\\n        );\\n\\n        // burn NFT, eliminating it from circulation on src chain\\n        _burn(tokenId);\\n\\n        // abi.encode() the payload with the values to send\\n        bytes memory payload = abi.encode(msg.sender, tokenId);\\n\\n        // encode adapterParams to specify more gas for the destination\\n        uint16 version = 1;\\n        bytes memory adapterParams = abi.encodePacked(\\n            version,\\n            gasForDestinationLzReceive\\n        );\\n\\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\\n        // you will be refunded for extra gas paid\\n        (uint256 messageFee, ) = endpoint.estimateFees(\\n            _chainId,\\n            address(this),\\n            payload,\\n            false,\\n            adapterParams\\n        );\\n\\n        require(\\n            msg.value >= messageFee,\\n            \\\"GG: msg.value not enough to cover messageFee. Send gas for message fees\\\"\\n        );\\n\\n        endpoint.send{value: msg.value}(\\n            _chainId, // destination chainId\\n            trustedRemoteLookup[_chainId], // destination address of nft contract\\n            payload, // abi.encoded()'ed bytes\\n            payable(msg.sender), // refund address\\n            address(0x0), // 'zroPaymentAddress' unused for this\\n            adapterParams // txParameters\\n        );\\n    }\\n\\n    function setBaseURI(string memory URI) external onlyOwner {\\n        baseURI = URI;\\n    }\\n\\n    function donate() external payable {\\n        // thank you\\n    }\\n\\n    // This allows the devs to receive kind donations\\n    function withdraw(uint256 amt) external onlyOwner {\\n        (bool sent, ) = payable(_owner).call{value: amt}(\\\"\\\");\\n        require(sent, \\\"GG: Failed to withdraw Ether\\\");\\n    }\\n\\n    // just in case this fixed variable limits us from future integrations\\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {\\n        gasForDestinationLzReceive = newVal;\\n    }\\n\\n    // ------------------\\n    // Internal Functions\\n    // ------------------\\n\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal override {\\n        // decode\\n        (address toAddr, uint256 tokenId) = abi.decode(\\n            _payload,\\n            (address, uint256)\\n        );\\n\\n        // mint the tokens back into existence on destination chain\\n        _safeMint(toAddr, tokenId);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x428d430397e3ab9075b8dcf86b16cf38444e39c0c62a0568e72cd9153cc2c3ea\",\"license\":\"GPL-3.0\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa3b2bf9ab38b6fd0ce67e52285e5b83a2215fc43ff03cbfb0a21ecf289420a38\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n}\\n\",\"keccak256\":\"0x2a01969a1311c15f810be757b878306a97de4330f32b6bc4bb944a56b432b705\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf1f7fb164dcbad60bd6f2d47a4ffdef6958fa001b89ebe41fc22080636f962da\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0xd77b1a359bb4fd98aa7719780b5802a3a5e3ac398fe965313b0c45e6c2a229ca\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    string public baseExtension = \\\".json\\\";\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(),baseExtension))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc19593dbee9ad69091ca656de50d8f98831145fbd0eae2e2dec6ad5954919c28\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x645fa540e1c39604e687998dc1ad77b6dc51baa6b77ecd0354ac84c3e9b8ee5d\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1bc8827436d98645be10971f0a6b0eb0f3d0ebaa96a0143816a30356d8ceef68\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2446c9eb310bf1bf381c6677b0f87b5aad019c4b94450b76eeb785028702b3fa\",\"license\":\"GPL-3.0\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x663444a6897e4772b361be6aeadf03232e18a551d46fc6462933590c654a1164\",\"license\":\"GPL-3.0\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bd01a719fbdd377b2e93cca31f72c12ea4d857479d2e112086070d7d1c6348\",\"license\":\"GPL-3.0\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfb33ef7de5a99b3531421c9dbb412c482f17edc10811dd1e9a028207dabfeb6a\",\"license\":\"GPL-3.0\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5f98b083279b397e15bf650472b1ce9fa0ba788e8a105764993ff8beaf5f203e\",\"license\":\"GPL-3.0\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfe9948f8cc7ab976ae2f953c253219738ab0f6fd5bab39bd44ece8a35ebe415b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e0000000000000000000000000000000000000000000000000000008152506007908051906020019062000051929190620002c6565b506000600d55610c0c600e5562055730600f553480156200007157600080fd5b506040516200544c3803806200544c83398181016040528101906200009791906200040b565b6040518060400160405280600781526020017f5365636f4e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f534e4654000000000000000000000000000000000000000000000000000000008152506200012362000117620001fa60201b60201c565b6200020260201b60201c565b81600190805190602001906200013b929190620002c6565b50806002908051906020019062000154929190620002c6565b50505033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c9080519060200190620001f1929190620002c6565b50505062000643565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002d4906200053a565b90600052602060002090601f016020900481019282620002f8576000855562000344565b82601f106200031357805160ff191683800117855562000344565b8280016001018555821562000344579182015b828111156200034357825182559160200191906001019062000326565b5b50905062000353919062000357565b5090565b5b808211156200037257600081600090555060010162000358565b5090565b60006200038d62000387846200049a565b62000471565b905082815260208101848484011115620003ac57620003ab62000609565b5b620003b984828562000504565b509392505050565b600081519050620003d28162000629565b92915050565b600082601f830112620003f057620003ef62000604565b5b81516200040284826020860162000376565b91505092915050565b6000806040838503121562000425576200042462000613565b5b600083015167ffffffffffffffff8111156200044657620004456200060e565b5b6200045485828601620003d8565b92505060206200046785828601620003c1565b9150509250929050565b60006200047d62000490565b90506200048b828262000570565b919050565b6000604051905090565b600067ffffffffffffffff821115620004b857620004b7620005d5565b5b620004c38262000618565b9050602081019050919050565b6000620004dd82620004e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200052457808201518184015260208101905062000507565b8381111562000534576000848401525b50505050565b600060028204905060018216806200055357607f821691505b602082108114156200056a5762000569620005a6565b5b50919050565b6200057b8262000618565b810181811067ffffffffffffffff821117156200059d576200059c620005d5565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200063481620004d0565b81146200064057600080fd5b50565b614df980620006536000396000f3fe6080604052600436106101cc5760003560e01c80638da5cb5b116100f7578063c668286211610095578063e985e9c511610064578063e985e9c514610659578063eb8d72b714610696578063ed88c68e146106bf578063f2fde38b146106c9576101cc565b8063c6682862146105b9578063c87b56dd146105e4578063cf89fa0314610621578063d1deba1f1461063d576101cc565b806395d89b41116100d157806395d89b4114610511578063a22cb4651461053c578063b2bdfa7b14610565578063b88d4fde14610590576101cc565b80638da5cb5b1461047f5780638ee74912146104aa578063943fb872146104e8576101cc565b80632e1a7d4d1161016f5780636ecd23061161013e5780636ecd2306146103d257806370a08231146103ee578063715018a61461042b5780637533d78814610442576101cc565b80632e1a7d4d1461031a57806342842e0e1461034357806355f804b31461036c5780636352211e14610395576101cc565b8063081812fc116101ab578063081812fc14610262578063095ea7b31461029f5780631c37a822146102c857806323b872dd146102f1576101cc565b80621d3567146101d157806301ffc9a7146101fa57806306fdde0314610237575b600080fd5b3480156101dd57600080fd5b506101f860048036038101906101f3919061328d565b6106f2565b005b34801561020657600080fd5b50610221600480360381019061021c919061304a565b610934565b60405161022e9190613c18565b60405180910390f35b34801561024357600080fd5b5061024c610a16565b6040516102599190613c55565b60405180910390f35b34801561026e57600080fd5b506102896004803603810190610284919061336c565b610aa8565b6040516102969190613b88565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c1919061300a565b610b2d565b005b3480156102d457600080fd5b506102ef60048036038101906102ea919061328d565b610c45565b005b3480156102fd57600080fd5b5061031860048036038101906103139190612ef4565b610cc5565b005b34801561032657600080fd5b50610341600480360381019061033c919061336c565b610d25565b005b34801561034f57600080fd5b5061036a60048036038101906103659190612ef4565b610e73565b005b34801561037857600080fd5b50610393600480360381019061038e91906130a4565b610e93565b005b3480156103a157600080fd5b506103bc60048036038101906103b7919061336c565b610f29565b6040516103c99190613b88565b60405180910390f35b6103ec60048036038101906103e791906133d9565b610fdb565b005b3480156103fa57600080fd5b5061041560048036038101906104109190612e47565b6110c2565b6040516104229190614116565b60405180910390f35b34801561043757600080fd5b5061044061117a565b005b34801561044e57600080fd5b50610469600480360381019061046491906130ed565b611202565b6040516104769190613c33565b60405180910390f35b34801561048b57600080fd5b506104946112a2565b6040516104a19190613b88565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061317a565b6112cb565b6040516104df929190614131565b60405180910390f35b3480156104f457600080fd5b5061050f600480360381019061050a919061336c565b61131f565b005b34801561051d57600080fd5b506105266113a5565b6040516105339190613c55565b60405180910390f35b34801561054857600080fd5b50610563600480360381019061055e9190612fca565b611437565b005b34801561057157600080fd5b5061057a61144d565b6040516105879190613b88565b60405180910390f35b34801561059c57600080fd5b506105b760048036038101906105b29190612f47565b611473565b005b3480156105c557600080fd5b506105ce6114d5565b6040516105db9190613c55565b60405180910390f35b3480156105f057600080fd5b5061060b6004803603810190610606919061336c565b611563565b6040516106189190613c55565b60405180910390f35b61063b6004803603810190610636919061332c565b61160d565b005b610657600480360381019061065291906131e9565b611900565b005b34801561066557600080fd5b50610680600480360381019061067b9190612eb4565b611aa0565b60405161068d9190613c18565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b8919061311a565b611b34565b005b6106c7611be0565b005b3480156106d557600080fd5b506106f060048036038101906106eb9190612e47565b611be2565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074c57600080fd5b600a60008561ffff1661ffff168152602001908152602001600020805461077290614415565b905083511480156107b85750600a60008561ffff1661ffff1681526020019081526020016000206040516107a69190613aff565b60405180910390208380519060200120145b6107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee90613e97565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b8152600401610836949392919061404d565b600060405180830381600087803b15801561085057600080fd5b505af1925050508015610861575060015b61092d576040518060400160405280825181526020018280519060200120815250600960008661ffff1661ffff168152602001908152602001600020846040516108ab9190613ae8565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d84848484604051610920949392919061404d565b60405180910390a161092e565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a0f5750610a0e82611cda565b5b9050919050565b606060018054610a2590614415565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5190614415565b8015610a9e5780601f10610a7357610100808354040283529160200191610a9e565b820191906000526020600020905b815481529060010190602001808311610a8157829003601f168201915b5050505050905090565b6000610ab382611d44565b610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae990613e57565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b3882610f29565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090613ef7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bc8611db0565b73ffffffffffffffffffffffffffffffffffffffff161480610bf75750610bf681610bf1611db0565b611aa0565b5b610c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2d90613d97565b60405180910390fd5b610c408383611db8565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90613df7565b60405180910390fd5b610cbf84848484611e71565b50505050565b610cd6610cd0611db0565b82611e9e565b610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c90613f17565b60405180910390fd5b610d20838383611f7c565b505050565b610d2d611db0565b73ffffffffffffffffffffffffffffffffffffffff16610d4b6112a2565b73ffffffffffffffffffffffffffffffffffffffff1614610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9890613e77565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610de990613b47565b60006040518083038185875af1925050503d8060008114610e26576040519150601f19603f3d011682016040523d82523d6000602084013e610e2b565b606091505b5050905080610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690613f57565b60405180910390fd5b5050565b610e8e83838360405180602001604052806000815250611473565b505050565b610e9b611db0565b73ffffffffffffffffffffffffffffffffffffffff16610eb96112a2565b73ffffffffffffffffffffffffffffffffffffffff1614610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690613e77565b60405180910390fd5b80600c9080519060200190610f25929190612b16565b5050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990613dd7565b60405180910390fd5b80915050919050565b60038160ff1610611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890613e17565b60405180910390fd5b600e548160ff16600d546110359190614259565b1115611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106d90613f77565b60405180910390fd5b61109433600d6000815461108990614478565b9190508190556121d8565b60028160ff1614156110bf576110be33600d600081546110b390614478565b9190508190556121d8565b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a90613db7565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611182611db0565b73ffffffffffffffffffffffffffffffffffffffff166111a06112a2565b73ffffffffffffffffffffffffffffffffffffffff16146111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed90613e77565b60405180910390fd5b61120060006121f6565b565b600a602052806000526040600020600091509050805461122190614415565b80601f016020809104026020016040519081016040528092919081815260200182805461124d90614415565b801561129a5780601f1061126f5761010080835404028352916020019161129a565b820191906000526020600020905b81548152906001019060200180831161127d57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60096020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b611327611db0565b73ffffffffffffffffffffffffffffffffffffffff166113456112a2565b73ffffffffffffffffffffffffffffffffffffffff161461139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139290613e77565b60405180910390fd5b80600f8190555050565b6060600280546113b490614415565b80601f01602080910402602001604051908101604052809291908181526020018280546113e090614415565b801561142d5780601f106114025761010080835404028352916020019161142d565b820191906000526020600020905b81548152906001019060200180831161141057829003601f168201915b5050505050905090565b611449611442611db0565b83836122ba565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61148461147e611db0565b83611e9e565b6114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90613f17565b60405180910390fd5b6114cf84848484612427565b50505050565b600780546114e290614415565b80601f016020809104026020016040519081016040528092919081815260200182805461150e90614415565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b505050505081565b606061156e82611d44565b6115ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a490613ed7565b60405180910390fd5b60006115b7612483565b905060008151116115d75760405180602001604052806000815250611605565b806115e184612515565b60076040516020016115f593929190613b16565b6040516020818303038152906040525b915050919050565b61161681610f29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167a90613d57565b60405180910390fd5b6000600a60008461ffff1661ffff16815260200190815260200160002080546116ab90614415565b9050116116ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e490613d17565b60405180910390fd5b6116f681612676565b6000338260405160200161170b929190613bef565b6040516020818303038152906040529050600060019050600081600f54604051602001611739929190613b5c565b60405160208183030381529060405290506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108730876000876040518663ffffffff1660e01b81526004016117b0959493929190613f97565b604080518083038186803b1580156117c757600080fd5b505afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff9190613399565b50905080341015611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90613c77565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488600a60008b61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b81526004016118c6969594939291906140a0565b6000604051808303818588803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b5050505050505050505050565b6000600960008761ffff1661ffff1681526020019081526020016000208560405161192b9190613ae8565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b816001015414156119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199790613f37565b60405180910390fd5b8060000154838390501480156119d05750806001015483836040516119c6929190613acf565b6040518091039020145b611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690613d37565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b8152600401611a66959493929190613ff8565b600060405180830381600087803b158015611a8057600080fd5b505af1158015611a94573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b3c611db0565b73ffffffffffffffffffffffffffffffffffffffff16611b5a6112a2565b73ffffffffffffffffffffffffffffffffffffffff1614611bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba790613e77565b60405180910390fd5b8181600a60008661ffff1661ffff1681526020019081526020016000209190611bda929190612b9c565b50505050565b565b611bea611db0565b73ffffffffffffffffffffffffffffffffffffffff16611c086112a2565b73ffffffffffffffffffffffffffffffffffffffff1614611c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5590613e77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590613cb7565b60405180910390fd5b611cd7816121f6565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e2b83610f29565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611e889190612e74565b91509150611e9682826121d8565b505050505050565b6000611ea982611d44565b611ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edf90613d77565b60405180910390fd5b6000611ef383610f29565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f6257508373ffffffffffffffffffffffffffffffffffffffff16611f4a84610aa8565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f735750611f728185611aa0565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f9c82610f29565b73ffffffffffffffffffffffffffffffffffffffff1614611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990613eb7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205990613cd7565b60405180910390fd5b61206d838383612787565b612078600082611db8565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120c891906142e0565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461211f9190614259565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6121f282826040518060200160405280600081525061278c565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232090613cf7565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161241a9190613c18565b60405180910390a3505050565b612432848484611f7c565b61243e848484846127e7565b61247d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247490613c97565b60405180910390fd5b50505050565b6060600c805461249290614415565b80601f01602080910402602001604051908101604052809291908181526020018280546124be90614415565b801561250b5780601f106124e05761010080835404028352916020019161250b565b820191906000526020600020905b8154815290600101906020018083116124ee57829003601f168201915b5050505050905090565b6060600082141561255d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612671565b600082905060005b6000821461258f57808061257890614478565b915050600a8261258891906142af565b9150612565565b60008167ffffffffffffffff8111156125ab576125aa6145ca565b5b6040519080825280601f01601f1916602001820160405280156125dd5781602001600182028036833780820191505090505b5090505b6000851461266a576001826125f691906142e0565b9150600a8561260591906144dd565b60306126119190614259565b60f81b8183815181106126275761262661459b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561266391906142af565b94506125e1565b8093505050505b919050565b600061268182610f29565b905061268f81600084612787565b61269a600083611db8565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126ea91906142e0565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b612796838361297e565b6127a360008484846127e7565b6127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d990613c97565b60405180910390fd5b505050565b60006128088473ffffffffffffffffffffffffffffffffffffffff16612b03565b15612971578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612831611db0565b8786866040518563ffffffff1660e01b81526004016128539493929190613ba3565b602060405180830381600087803b15801561286d57600080fd5b505af192505050801561289e57506040513d601f19601f8201168201806040525081019061289b9190613077565b60015b612921573d80600081146128ce576040519150601f19603f3d011682016040523d82523d6000602084013e6128d3565b606091505b50600081511415612919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291090613c97565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612976565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e590613e37565b60405180910390fd5b6129fa60008383612787565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a4a9190614259565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612b2290614415565b90600052602060002090601f016020900481019282612b445760008555612b8b565b82601f10612b5d57805160ff1916838001178555612b8b565b82800160010185558215612b8b579182015b82811115612b8a578251825591602001919060010190612b6f565b5b509050612b989190612c22565b5090565b828054612ba890614415565b90600052602060002090601f016020900481019282612bca5760008555612c11565b82601f10612be357803560ff1916838001178555612c11565b82800160010185558215612c11579182015b82811115612c10578235825591602001919060010190612bf5565b5b509050612c1e9190612c22565b5090565b5b80821115612c3b576000816000905550600101612c23565b5090565b6000612c52612c4d8461417f565b61415a565b905082815260208101848484011115612c6e57612c6d614608565b5b612c798482856143d3565b509392505050565b6000612c94612c8f846141b0565b61415a565b905082815260208101848484011115612cb057612caf614608565b5b612cbb8482856143d3565b509392505050565b600081359050612cd281614d0b565b92915050565b600081519050612ce781614d22565b92915050565b600081359050612cfc81614d39565b92915050565b600081359050612d1181614d50565b92915050565b600081519050612d2681614d50565b92915050565b60008083601f840112612d4257612d416145fe565b5b8235905067ffffffffffffffff811115612d5f57612d5e6145f9565b5b602083019150836001820283011115612d7b57612d7a614603565b5b9250929050565b600082601f830112612d9757612d966145fe565b5b8135612da7848260208601612c3f565b91505092915050565b600082601f830112612dc557612dc46145fe565b5b8135612dd5848260208601612c81565b91505092915050565b600081359050612ded81614d67565b92915050565b600081359050612e0281614d7e565b92915050565b600081519050612e1781614d7e565b92915050565b600081359050612e2c81614d95565b92915050565b600081359050612e4181614dac565b92915050565b600060208284031215612e5d57612e5c614612565b5b6000612e6b84828501612cc3565b91505092915050565b60008060408385031215612e8b57612e8a614612565b5b6000612e9985828601612cd8565b9250506020612eaa85828601612e08565b9150509250929050565b60008060408385031215612ecb57612eca614612565b5b6000612ed985828601612cc3565b9250506020612eea85828601612cc3565b9150509250929050565b600080600060608486031215612f0d57612f0c614612565b5b6000612f1b86828701612cc3565b9350506020612f2c86828701612cc3565b9250506040612f3d86828701612df3565b9150509250925092565b60008060008060808587031215612f6157612f60614612565b5b6000612f6f87828801612cc3565b9450506020612f8087828801612cc3565b9350506040612f9187828801612df3565b925050606085013567ffffffffffffffff811115612fb257612fb161460d565b5b612fbe87828801612d82565b91505092959194509250565b60008060408385031215612fe157612fe0614612565b5b6000612fef85828601612cc3565b925050602061300085828601612ced565b9150509250929050565b6000806040838503121561302157613020614612565b5b600061302f85828601612cc3565b925050602061304085828601612df3565b9150509250929050565b6000602082840312156130605761305f614612565b5b600061306e84828501612d02565b91505092915050565b60006020828403121561308d5761308c614612565b5b600061309b84828501612d17565b91505092915050565b6000602082840312156130ba576130b9614612565b5b600082013567ffffffffffffffff8111156130d8576130d761460d565b5b6130e484828501612db0565b91505092915050565b60006020828403121561310357613102614612565b5b600061311184828501612dde565b91505092915050565b60008060006040848603121561313357613132614612565b5b600061314186828701612dde565b935050602084013567ffffffffffffffff8111156131625761316161460d565b5b61316e86828701612d2c565b92509250509250925092565b60008060006060848603121561319357613192614612565b5b60006131a186828701612dde565b935050602084013567ffffffffffffffff8111156131c2576131c161460d565b5b6131ce86828701612d82565b92505060406131df86828701612df3565b9150509250925092565b60008060008060006080868803121561320557613204614612565b5b600061321388828901612dde565b955050602086013567ffffffffffffffff8111156132345761323361460d565b5b61324088828901612d82565b945050604061325188828901612e1d565b935050606086013567ffffffffffffffff8111156132725761327161460d565b5b61327e88828901612d2c565b92509250509295509295909350565b600080600080608085870312156132a7576132a6614612565b5b60006132b587828801612dde565b945050602085013567ffffffffffffffff8111156132d6576132d561460d565b5b6132e287828801612d82565b93505060406132f387828801612e1d565b925050606085013567ffffffffffffffff8111156133145761331361460d565b5b61332087828801612d82565b91505092959194509250565b6000806040838503121561334357613342614612565b5b600061335185828601612dde565b925050602061336285828601612df3565b9150509250929050565b60006020828403121561338257613381614612565b5b600061339084828501612df3565b91505092915050565b600080604083850312156133b0576133af614612565b5b60006133be85828601612e08565b92505060206133cf85828601612e08565b9150509250929050565b6000602082840312156133ef576133ee614612565b5b60006133fd84828501612e32565b91505092915050565b61340f81614326565b82525050565b61341e81614314565b82525050565b61342d81614338565b82525050565b61343c81614344565b82525050565b600061344e8385614221565b935061345b8385846143d3565b61346483614617565b840190509392505050565b600061347b8385614232565b93506134888385846143d3565b82840190509392505050565b600061349f8261420b565b6134a98185614221565b93506134b98185602086016143e2565b6134c281614617565b840191505092915050565b60006134d88261420b565b6134e28185614232565b93506134f28185602086016143e2565b80840191505092915050565b6000815461350b81614415565b6135158186614221565b94506001821660008114613530576001811461354257613575565b60ff1983168652602086019350613575565b61354b856141e1565b60005b8381101561356d5781548189015260018201915060208101905061354e565b808801955050505b50505092915050565b6000815461358b81614415565b6135958186614232565b945060018216600081146135b057600181146135c1576135f4565b60ff198316865281860193506135f4565b6135ca856141e1565b60005b838110156135ec578154818901526001820191506020810190506135cd565b838801955050505b50505092915050565b600061360882614216565b613612818561423d565b93506136228185602086016143e2565b61362b81614617565b840191505092915050565b600061364182614216565b61364b818561424e565b935061365b8185602086016143e2565b80840191505092915050565b6000815461367481614415565b61367e818661424e565b9450600182166000811461369957600181146136aa576136dd565b60ff198316865281860193506136dd565b6136b3856141f6565b60005b838110156136d5578154818901526001820191506020810190506136b6565b838801955050505b50505092915050565b60006136f360478361423d565b91506136fe82614635565b606082019050919050565b600061371660328361423d565b9150613721826146aa565b604082019050919050565b600061373960268361423d565b9150613744826146f9565b604082019050919050565b600061375c60248361423d565b915061376782614748565b604082019050919050565b600061377f60198361423d565b915061378a82614797565b602082019050919050565b60006137a2602e8361423d565b91506137ad826147c0565b604082019050919050565b60006137c5601a8361423d565b91506137d08261480f565b602082019050919050565b60006137e860228361423d565b91506137f382614838565b604082019050919050565b600061380b602c8361423d565b915061381682614887565b604082019050919050565b600061382e60388361423d565b9150613839826148d6565b604082019050919050565b6000613851602a8361423d565b915061385c82614925565b604082019050919050565b600061387460298361423d565b915061387f82614974565b604082019050919050565b6000613897602b8361423d565b91506138a2826149c3565b604082019050919050565b60006138ba601e8361423d565b91506138c582614a12565b602082019050919050565b60006138dd60208361423d565b91506138e882614a3b565b602082019050919050565b6000613900602c8361423d565b915061390b82614a64565b604082019050919050565b600061392360208361423d565b915061392e82614ab3565b602082019050919050565b600061394660348361423d565b915061395182614adc565b604082019050919050565b600061396960298361423d565b915061397482614b2b565b604082019050919050565b600061398c602f8361423d565b915061399782614b7a565b604082019050919050565b60006139af60218361423d565b91506139ba82614bc9565b604082019050919050565b60006139d2600083614232565b91506139dd82614c18565b600082019050919050565b60006139f560318361423d565b9150613a0082614c1b565b604082019050919050565b6000613a1860268361423d565b9150613a2382614c6a565b604082019050919050565b6000613a3b601c8361423d565b9150613a4682614cb9565b602082019050919050565b6000613a5e60178361423d565b9150613a6982614ce2565b602082019050919050565b613a7d8161437a565b82525050565b613a94613a8f8261437a565b6144c1565b82525050565b613aa3816143a8565b82525050565b613aba613ab5826143a8565b6144d3565b82525050565b613ac9816143b2565b82525050565b6000613adc82848661346f565b91508190509392505050565b6000613af482846134cd565b915081905092915050565b6000613b0b828461357e565b915081905092915050565b6000613b228286613636565b9150613b2e8285613636565b9150613b3a8284613667565b9150819050949350505050565b6000613b52826139c5565b9150819050919050565b6000613b688285613a83565b600282019150613b788284613aa9565b6020820191508190509392505050565b6000602082019050613b9d6000830184613415565b92915050565b6000608082019050613bb86000830187613415565b613bc56020830186613415565b613bd26040830185613a9a565b8181036060830152613be48184613494565b905095945050505050565b6000604082019050613c046000830185613415565b613c116020830184613a9a565b9392505050565b6000602082019050613c2d6000830184613424565b92915050565b60006020820190508181036000830152613c4d8184613494565b905092915050565b60006020820190508181036000830152613c6f81846135fd565b905092915050565b60006020820190508181036000830152613c90816136e6565b9050919050565b60006020820190508181036000830152613cb081613709565b9050919050565b60006020820190508181036000830152613cd08161372c565b9050919050565b60006020820190508181036000830152613cf08161374f565b9050919050565b60006020820190508181036000830152613d1081613772565b9050919050565b60006020820190508181036000830152613d3081613795565b9050919050565b60006020820190508181036000830152613d50816137b8565b9050919050565b60006020820190508181036000830152613d70816137db565b9050919050565b60006020820190508181036000830152613d90816137fe565b9050919050565b60006020820190508181036000830152613db081613821565b9050919050565b60006020820190508181036000830152613dd081613844565b9050919050565b60006020820190508181036000830152613df081613867565b9050919050565b60006020820190508181036000830152613e108161388a565b9050919050565b60006020820190508181036000830152613e30816138ad565b9050919050565b60006020820190508181036000830152613e50816138d0565b9050919050565b60006020820190508181036000830152613e70816138f3565b9050919050565b60006020820190508181036000830152613e9081613916565b9050919050565b60006020820190508181036000830152613eb081613939565b9050919050565b60006020820190508181036000830152613ed08161395c565b9050919050565b60006020820190508181036000830152613ef08161397f565b9050919050565b60006020820190508181036000830152613f10816139a2565b9050919050565b60006020820190508181036000830152613f30816139e8565b9050919050565b60006020820190508181036000830152613f5081613a0b565b9050919050565b60006020820190508181036000830152613f7081613a2e565b9050919050565b60006020820190508181036000830152613f9081613a51565b9050919050565b600060a082019050613fac6000830188613a74565b613fb96020830187613415565b8181036040830152613fcb8186613494565b9050613fda6060830185613424565b8181036080830152613fec8184613494565b90509695505050505050565b600060808201905061400d6000830188613a74565b818103602083015261401f8187613494565b905061402e6040830186613ac0565b8181036060830152614041818486613442565b90509695505050505050565b60006080820190506140626000830187613a74565b81810360208301526140748186613494565b90506140836040830185613ac0565b81810360608301526140958184613494565b905095945050505050565b600060c0820190506140b56000830189613a74565b81810360208301526140c781886134fe565b905081810360408301526140db8187613494565b90506140ea6060830186613406565b6140f76080830185613415565b81810360a08301526141098184613494565b9050979650505050505050565b600060208201905061412b6000830184613a9a565b92915050565b60006040820190506141466000830185613a9a565b6141536020830184613433565b9392505050565b6000614164614175565b90506141708282614447565b919050565b6000604051905090565b600067ffffffffffffffff82111561419a576141996145ca565b5b6141a382614617565b9050602081019050919050565b600067ffffffffffffffff8211156141cb576141ca6145ca565b5b6141d482614617565b9050602081019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614264826143a8565b915061426f836143a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142a4576142a361450e565b5b828201905092915050565b60006142ba826143a8565b91506142c5836143a8565b9250826142d5576142d461453d565b5b828204905092915050565b60006142eb826143a8565b91506142f6836143a8565b9250828210156143095761430861450e565b5b828203905092915050565b600061431f82614388565b9050919050565b600061433182614388565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156144005780820151818401526020810190506143e5565b8381111561440f576000848401525b50505050565b6000600282049050600182168061442d57607f821691505b602082108114156144415761444061456c565b5b50919050565b61445082614617565b810181811067ffffffffffffffff8211171561446f5761446e6145ca565b5b80604052505050565b6000614483826143a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144b6576144b561450e565b5b600182019050919050565b60006144cc82614628565b9050919050565b6000819050919050565b60006144e8826143a8565b91506144f3836143a8565b9250826145035761450261453d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f47473a206d73672e76616c7565206e6f7420656e6f75676820746f20636f766560008201527f72206d6573736167654665652e2053656e642067617320666f72206d6573736160208201527f6765206665657300000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5468697320636861696e2069732063757272656e746c7920756e617661696c6160008201527f626c6520666f722074726176656c000000000000000000000000000000000000602082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f596f75206d757374206f776e2074686520746f6b656e20746f2074726176657260008201527f7365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f47473a204d61782032204e46547320706572207472616e73616374696f6e0000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b7f47473a204d696e74206578636565647320737570706c79000000000000000000600082015250565b614d1481614314565b8114614d1f57600080fd5b50565b614d2b81614326565b8114614d3657600080fd5b50565b614d4281614338565b8114614d4d57600080fd5b50565b614d598161434e565b8114614d6457600080fd5b50565b614d708161437a565b8114614d7b57600080fd5b50565b614d87816143a8565b8114614d9257600080fd5b50565b614d9e816143b2565b8114614da957600080fd5b50565b614db5816143c6565b8114614dc057600080fd5b5056fea264697066735822122056a7c497b94aed8b720c47e68d3fb52bc8d65cc26d2fdfa6fe80c2354deeb14f64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101cc5760003560e01c80638da5cb5b116100f7578063c668286211610095578063e985e9c511610064578063e985e9c514610659578063eb8d72b714610696578063ed88c68e146106bf578063f2fde38b146106c9576101cc565b8063c6682862146105b9578063c87b56dd146105e4578063cf89fa0314610621578063d1deba1f1461063d576101cc565b806395d89b41116100d157806395d89b4114610511578063a22cb4651461053c578063b2bdfa7b14610565578063b88d4fde14610590576101cc565b80638da5cb5b1461047f5780638ee74912146104aa578063943fb872146104e8576101cc565b80632e1a7d4d1161016f5780636ecd23061161013e5780636ecd2306146103d257806370a08231146103ee578063715018a61461042b5780637533d78814610442576101cc565b80632e1a7d4d1461031a57806342842e0e1461034357806355f804b31461036c5780636352211e14610395576101cc565b8063081812fc116101ab578063081812fc14610262578063095ea7b31461029f5780631c37a822146102c857806323b872dd146102f1576101cc565b80621d3567146101d157806301ffc9a7146101fa57806306fdde0314610237575b600080fd5b3480156101dd57600080fd5b506101f860048036038101906101f3919061328d565b6106f2565b005b34801561020657600080fd5b50610221600480360381019061021c919061304a565b610934565b60405161022e9190613c18565b60405180910390f35b34801561024357600080fd5b5061024c610a16565b6040516102599190613c55565b60405180910390f35b34801561026e57600080fd5b506102896004803603810190610284919061336c565b610aa8565b6040516102969190613b88565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c1919061300a565b610b2d565b005b3480156102d457600080fd5b506102ef60048036038101906102ea919061328d565b610c45565b005b3480156102fd57600080fd5b5061031860048036038101906103139190612ef4565b610cc5565b005b34801561032657600080fd5b50610341600480360381019061033c919061336c565b610d25565b005b34801561034f57600080fd5b5061036a60048036038101906103659190612ef4565b610e73565b005b34801561037857600080fd5b50610393600480360381019061038e91906130a4565b610e93565b005b3480156103a157600080fd5b506103bc60048036038101906103b7919061336c565b610f29565b6040516103c99190613b88565b60405180910390f35b6103ec60048036038101906103e791906133d9565b610fdb565b005b3480156103fa57600080fd5b5061041560048036038101906104109190612e47565b6110c2565b6040516104229190614116565b60405180910390f35b34801561043757600080fd5b5061044061117a565b005b34801561044e57600080fd5b50610469600480360381019061046491906130ed565b611202565b6040516104769190613c33565b60405180910390f35b34801561048b57600080fd5b506104946112a2565b6040516104a19190613b88565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061317a565b6112cb565b6040516104df929190614131565b60405180910390f35b3480156104f457600080fd5b5061050f600480360381019061050a919061336c565b61131f565b005b34801561051d57600080fd5b506105266113a5565b6040516105339190613c55565b60405180910390f35b34801561054857600080fd5b50610563600480360381019061055e9190612fca565b611437565b005b34801561057157600080fd5b5061057a61144d565b6040516105879190613b88565b60405180910390f35b34801561059c57600080fd5b506105b760048036038101906105b29190612f47565b611473565b005b3480156105c557600080fd5b506105ce6114d5565b6040516105db9190613c55565b60405180910390f35b3480156105f057600080fd5b5061060b6004803603810190610606919061336c565b611563565b6040516106189190613c55565b60405180910390f35b61063b6004803603810190610636919061332c565b61160d565b005b610657600480360381019061065291906131e9565b611900565b005b34801561066557600080fd5b50610680600480360381019061067b9190612eb4565b611aa0565b60405161068d9190613c18565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b8919061311a565b611b34565b005b6106c7611be0565b005b3480156106d557600080fd5b506106f060048036038101906106eb9190612e47565b611be2565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074c57600080fd5b600a60008561ffff1661ffff168152602001908152602001600020805461077290614415565b905083511480156107b85750600a60008561ffff1661ffff1681526020019081526020016000206040516107a69190613aff565b60405180910390208380519060200120145b6107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee90613e97565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b8152600401610836949392919061404d565b600060405180830381600087803b15801561085057600080fd5b505af1925050508015610861575060015b61092d576040518060400160405280825181526020018280519060200120815250600960008661ffff1661ffff168152602001908152602001600020846040516108ab9190613ae8565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d84848484604051610920949392919061404d565b60405180910390a161092e565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a0f5750610a0e82611cda565b5b9050919050565b606060018054610a2590614415565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5190614415565b8015610a9e5780601f10610a7357610100808354040283529160200191610a9e565b820191906000526020600020905b815481529060010190602001808311610a8157829003601f168201915b5050505050905090565b6000610ab382611d44565b610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae990613e57565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b3882610f29565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090613ef7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bc8611db0565b73ffffffffffffffffffffffffffffffffffffffff161480610bf75750610bf681610bf1611db0565b611aa0565b5b610c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2d90613d97565b60405180910390fd5b610c408383611db8565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90613df7565b60405180910390fd5b610cbf84848484611e71565b50505050565b610cd6610cd0611db0565b82611e9e565b610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c90613f17565b60405180910390fd5b610d20838383611f7c565b505050565b610d2d611db0565b73ffffffffffffffffffffffffffffffffffffffff16610d4b6112a2565b73ffffffffffffffffffffffffffffffffffffffff1614610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9890613e77565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610de990613b47565b60006040518083038185875af1925050503d8060008114610e26576040519150601f19603f3d011682016040523d82523d6000602084013e610e2b565b606091505b5050905080610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690613f57565b60405180910390fd5b5050565b610e8e83838360405180602001604052806000815250611473565b505050565b610e9b611db0565b73ffffffffffffffffffffffffffffffffffffffff16610eb96112a2565b73ffffffffffffffffffffffffffffffffffffffff1614610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690613e77565b60405180910390fd5b80600c9080519060200190610f25929190612b16565b5050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990613dd7565b60405180910390fd5b80915050919050565b60038160ff1610611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890613e17565b60405180910390fd5b600e548160ff16600d546110359190614259565b1115611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106d90613f77565b60405180910390fd5b61109433600d6000815461108990614478565b9190508190556121d8565b60028160ff1614156110bf576110be33600d600081546110b390614478565b9190508190556121d8565b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a90613db7565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611182611db0565b73ffffffffffffffffffffffffffffffffffffffff166111a06112a2565b73ffffffffffffffffffffffffffffffffffffffff16146111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed90613e77565b60405180910390fd5b61120060006121f6565b565b600a602052806000526040600020600091509050805461122190614415565b80601f016020809104026020016040519081016040528092919081815260200182805461124d90614415565b801561129a5780601f1061126f5761010080835404028352916020019161129a565b820191906000526020600020905b81548152906001019060200180831161127d57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60096020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b611327611db0565b73ffffffffffffffffffffffffffffffffffffffff166113456112a2565b73ffffffffffffffffffffffffffffffffffffffff161461139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139290613e77565b60405180910390fd5b80600f8190555050565b6060600280546113b490614415565b80601f01602080910402602001604051908101604052809291908181526020018280546113e090614415565b801561142d5780601f106114025761010080835404028352916020019161142d565b820191906000526020600020905b81548152906001019060200180831161141057829003601f168201915b5050505050905090565b611449611442611db0565b83836122ba565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61148461147e611db0565b83611e9e565b6114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90613f17565b60405180910390fd5b6114cf84848484612427565b50505050565b600780546114e290614415565b80601f016020809104026020016040519081016040528092919081815260200182805461150e90614415565b801561155b5780601f106115305761010080835404028352916020019161155b565b820191906000526020600020905b81548152906001019060200180831161153e57829003601f168201915b505050505081565b606061156e82611d44565b6115ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a490613ed7565b60405180910390fd5b60006115b7612483565b905060008151116115d75760405180602001604052806000815250611605565b806115e184612515565b60076040516020016115f593929190613b16565b6040516020818303038152906040525b915050919050565b61161681610f29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167a90613d57565b60405180910390fd5b6000600a60008461ffff1661ffff16815260200190815260200160002080546116ab90614415565b9050116116ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e490613d17565b60405180910390fd5b6116f681612676565b6000338260405160200161170b929190613bef565b6040516020818303038152906040529050600060019050600081600f54604051602001611739929190613b5c565b60405160208183030381529060405290506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108730876000876040518663ffffffff1660e01b81526004016117b0959493929190613f97565b604080518083038186803b1580156117c757600080fd5b505afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff9190613399565b50905080341015611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90613c77565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488600a60008b61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b81526004016118c6969594939291906140a0565b6000604051808303818588803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b5050505050505050505050565b6000600960008761ffff1661ffff1681526020019081526020016000208560405161192b9190613ae8565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b816001015414156119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199790613f37565b60405180910390fd5b8060000154838390501480156119d05750806001015483836040516119c6929190613acf565b6040518091039020145b611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690613d37565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b8152600401611a66959493929190613ff8565b600060405180830381600087803b158015611a8057600080fd5b505af1158015611a94573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b3c611db0565b73ffffffffffffffffffffffffffffffffffffffff16611b5a6112a2565b73ffffffffffffffffffffffffffffffffffffffff1614611bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba790613e77565b60405180910390fd5b8181600a60008661ffff1661ffff1681526020019081526020016000209190611bda929190612b9c565b50505050565b565b611bea611db0565b73ffffffffffffffffffffffffffffffffffffffff16611c086112a2565b73ffffffffffffffffffffffffffffffffffffffff1614611c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5590613e77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590613cb7565b60405180910390fd5b611cd7816121f6565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e2b83610f29565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611e889190612e74565b91509150611e9682826121d8565b505050505050565b6000611ea982611d44565b611ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edf90613d77565b60405180910390fd5b6000611ef383610f29565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f6257508373ffffffffffffffffffffffffffffffffffffffff16611f4a84610aa8565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f735750611f728185611aa0565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f9c82610f29565b73ffffffffffffffffffffffffffffffffffffffff1614611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990613eb7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205990613cd7565b60405180910390fd5b61206d838383612787565b612078600082611db8565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120c891906142e0565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461211f9190614259565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6121f282826040518060200160405280600081525061278c565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232090613cf7565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161241a9190613c18565b60405180910390a3505050565b612432848484611f7c565b61243e848484846127e7565b61247d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247490613c97565b60405180910390fd5b50505050565b6060600c805461249290614415565b80601f01602080910402602001604051908101604052809291908181526020018280546124be90614415565b801561250b5780601f106124e05761010080835404028352916020019161250b565b820191906000526020600020905b8154815290600101906020018083116124ee57829003601f168201915b5050505050905090565b6060600082141561255d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612671565b600082905060005b6000821461258f57808061257890614478565b915050600a8261258891906142af565b9150612565565b60008167ffffffffffffffff8111156125ab576125aa6145ca565b5b6040519080825280601f01601f1916602001820160405280156125dd5781602001600182028036833780820191505090505b5090505b6000851461266a576001826125f691906142e0565b9150600a8561260591906144dd565b60306126119190614259565b60f81b8183815181106126275761262661459b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561266391906142af565b94506125e1565b8093505050505b919050565b600061268182610f29565b905061268f81600084612787565b61269a600083611db8565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126ea91906142e0565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b612796838361297e565b6127a360008484846127e7565b6127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d990613c97565b60405180910390fd5b505050565b60006128088473ffffffffffffffffffffffffffffffffffffffff16612b03565b15612971578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612831611db0565b8786866040518563ffffffff1660e01b81526004016128539493929190613ba3565b602060405180830381600087803b15801561286d57600080fd5b505af192505050801561289e57506040513d601f19601f8201168201806040525081019061289b9190613077565b60015b612921573d80600081146128ce576040519150601f19603f3d011682016040523d82523d6000602084013e6128d3565b606091505b50600081511415612919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291090613c97565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612976565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e590613e37565b60405180910390fd5b6129fa60008383612787565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a4a9190614259565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612b2290614415565b90600052602060002090601f016020900481019282612b445760008555612b8b565b82601f10612b5d57805160ff1916838001178555612b8b565b82800160010185558215612b8b579182015b82811115612b8a578251825591602001919060010190612b6f565b5b509050612b989190612c22565b5090565b828054612ba890614415565b90600052602060002090601f016020900481019282612bca5760008555612c11565b82601f10612be357803560ff1916838001178555612c11565b82800160010185558215612c11579182015b82811115612c10578235825591602001919060010190612bf5565b5b509050612c1e9190612c22565b5090565b5b80821115612c3b576000816000905550600101612c23565b5090565b6000612c52612c4d8461417f565b61415a565b905082815260208101848484011115612c6e57612c6d614608565b5b612c798482856143d3565b509392505050565b6000612c94612c8f846141b0565b61415a565b905082815260208101848484011115612cb057612caf614608565b5b612cbb8482856143d3565b509392505050565b600081359050612cd281614d0b565b92915050565b600081519050612ce781614d22565b92915050565b600081359050612cfc81614d39565b92915050565b600081359050612d1181614d50565b92915050565b600081519050612d2681614d50565b92915050565b60008083601f840112612d4257612d416145fe565b5b8235905067ffffffffffffffff811115612d5f57612d5e6145f9565b5b602083019150836001820283011115612d7b57612d7a614603565b5b9250929050565b600082601f830112612d9757612d966145fe565b5b8135612da7848260208601612c3f565b91505092915050565b600082601f830112612dc557612dc46145fe565b5b8135612dd5848260208601612c81565b91505092915050565b600081359050612ded81614d67565b92915050565b600081359050612e0281614d7e565b92915050565b600081519050612e1781614d7e565b92915050565b600081359050612e2c81614d95565b92915050565b600081359050612e4181614dac565b92915050565b600060208284031215612e5d57612e5c614612565b5b6000612e6b84828501612cc3565b91505092915050565b60008060408385031215612e8b57612e8a614612565b5b6000612e9985828601612cd8565b9250506020612eaa85828601612e08565b9150509250929050565b60008060408385031215612ecb57612eca614612565b5b6000612ed985828601612cc3565b9250506020612eea85828601612cc3565b9150509250929050565b600080600060608486031215612f0d57612f0c614612565b5b6000612f1b86828701612cc3565b9350506020612f2c86828701612cc3565b9250506040612f3d86828701612df3565b9150509250925092565b60008060008060808587031215612f6157612f60614612565b5b6000612f6f87828801612cc3565b9450506020612f8087828801612cc3565b9350506040612f9187828801612df3565b925050606085013567ffffffffffffffff811115612fb257612fb161460d565b5b612fbe87828801612d82565b91505092959194509250565b60008060408385031215612fe157612fe0614612565b5b6000612fef85828601612cc3565b925050602061300085828601612ced565b9150509250929050565b6000806040838503121561302157613020614612565b5b600061302f85828601612cc3565b925050602061304085828601612df3565b9150509250929050565b6000602082840312156130605761305f614612565b5b600061306e84828501612d02565b91505092915050565b60006020828403121561308d5761308c614612565b5b600061309b84828501612d17565b91505092915050565b6000602082840312156130ba576130b9614612565b5b600082013567ffffffffffffffff8111156130d8576130d761460d565b5b6130e484828501612db0565b91505092915050565b60006020828403121561310357613102614612565b5b600061311184828501612dde565b91505092915050565b60008060006040848603121561313357613132614612565b5b600061314186828701612dde565b935050602084013567ffffffffffffffff8111156131625761316161460d565b5b61316e86828701612d2c565b92509250509250925092565b60008060006060848603121561319357613192614612565b5b60006131a186828701612dde565b935050602084013567ffffffffffffffff8111156131c2576131c161460d565b5b6131ce86828701612d82565b92505060406131df86828701612df3565b9150509250925092565b60008060008060006080868803121561320557613204614612565b5b600061321388828901612dde565b955050602086013567ffffffffffffffff8111156132345761323361460d565b5b61324088828901612d82565b945050604061325188828901612e1d565b935050606086013567ffffffffffffffff8111156132725761327161460d565b5b61327e88828901612d2c565b92509250509295509295909350565b600080600080608085870312156132a7576132a6614612565b5b60006132b587828801612dde565b945050602085013567ffffffffffffffff8111156132d6576132d561460d565b5b6132e287828801612d82565b93505060406132f387828801612e1d565b925050606085013567ffffffffffffffff8111156133145761331361460d565b5b61332087828801612d82565b91505092959194509250565b6000806040838503121561334357613342614612565b5b600061335185828601612dde565b925050602061336285828601612df3565b9150509250929050565b60006020828403121561338257613381614612565b5b600061339084828501612df3565b91505092915050565b600080604083850312156133b0576133af614612565b5b60006133be85828601612e08565b92505060206133cf85828601612e08565b9150509250929050565b6000602082840312156133ef576133ee614612565b5b60006133fd84828501612e32565b91505092915050565b61340f81614326565b82525050565b61341e81614314565b82525050565b61342d81614338565b82525050565b61343c81614344565b82525050565b600061344e8385614221565b935061345b8385846143d3565b61346483614617565b840190509392505050565b600061347b8385614232565b93506134888385846143d3565b82840190509392505050565b600061349f8261420b565b6134a98185614221565b93506134b98185602086016143e2565b6134c281614617565b840191505092915050565b60006134d88261420b565b6134e28185614232565b93506134f28185602086016143e2565b80840191505092915050565b6000815461350b81614415565b6135158186614221565b94506001821660008114613530576001811461354257613575565b60ff1983168652602086019350613575565b61354b856141e1565b60005b8381101561356d5781548189015260018201915060208101905061354e565b808801955050505b50505092915050565b6000815461358b81614415565b6135958186614232565b945060018216600081146135b057600181146135c1576135f4565b60ff198316865281860193506135f4565b6135ca856141e1565b60005b838110156135ec578154818901526001820191506020810190506135cd565b838801955050505b50505092915050565b600061360882614216565b613612818561423d565b93506136228185602086016143e2565b61362b81614617565b840191505092915050565b600061364182614216565b61364b818561424e565b935061365b8185602086016143e2565b80840191505092915050565b6000815461367481614415565b61367e818661424e565b9450600182166000811461369957600181146136aa576136dd565b60ff198316865281860193506136dd565b6136b3856141f6565b60005b838110156136d5578154818901526001820191506020810190506136b6565b838801955050505b50505092915050565b60006136f360478361423d565b91506136fe82614635565b606082019050919050565b600061371660328361423d565b9150613721826146aa565b604082019050919050565b600061373960268361423d565b9150613744826146f9565b604082019050919050565b600061375c60248361423d565b915061376782614748565b604082019050919050565b600061377f60198361423d565b915061378a82614797565b602082019050919050565b60006137a2602e8361423d565b91506137ad826147c0565b604082019050919050565b60006137c5601a8361423d565b91506137d08261480f565b602082019050919050565b60006137e860228361423d565b91506137f382614838565b604082019050919050565b600061380b602c8361423d565b915061381682614887565b604082019050919050565b600061382e60388361423d565b9150613839826148d6565b604082019050919050565b6000613851602a8361423d565b915061385c82614925565b604082019050919050565b600061387460298361423d565b915061387f82614974565b604082019050919050565b6000613897602b8361423d565b91506138a2826149c3565b604082019050919050565b60006138ba601e8361423d565b91506138c582614a12565b602082019050919050565b60006138dd60208361423d565b91506138e882614a3b565b602082019050919050565b6000613900602c8361423d565b915061390b82614a64565b604082019050919050565b600061392360208361423d565b915061392e82614ab3565b602082019050919050565b600061394660348361423d565b915061395182614adc565b604082019050919050565b600061396960298361423d565b915061397482614b2b565b604082019050919050565b600061398c602f8361423d565b915061399782614b7a565b604082019050919050565b60006139af60218361423d565b91506139ba82614bc9565b604082019050919050565b60006139d2600083614232565b91506139dd82614c18565b600082019050919050565b60006139f560318361423d565b9150613a0082614c1b565b604082019050919050565b6000613a1860268361423d565b9150613a2382614c6a565b604082019050919050565b6000613a3b601c8361423d565b9150613a4682614cb9565b602082019050919050565b6000613a5e60178361423d565b9150613a6982614ce2565b602082019050919050565b613a7d8161437a565b82525050565b613a94613a8f8261437a565b6144c1565b82525050565b613aa3816143a8565b82525050565b613aba613ab5826143a8565b6144d3565b82525050565b613ac9816143b2565b82525050565b6000613adc82848661346f565b91508190509392505050565b6000613af482846134cd565b915081905092915050565b6000613b0b828461357e565b915081905092915050565b6000613b228286613636565b9150613b2e8285613636565b9150613b3a8284613667565b9150819050949350505050565b6000613b52826139c5565b9150819050919050565b6000613b688285613a83565b600282019150613b788284613aa9565b6020820191508190509392505050565b6000602082019050613b9d6000830184613415565b92915050565b6000608082019050613bb86000830187613415565b613bc56020830186613415565b613bd26040830185613a9a565b8181036060830152613be48184613494565b905095945050505050565b6000604082019050613c046000830185613415565b613c116020830184613a9a565b9392505050565b6000602082019050613c2d6000830184613424565b92915050565b60006020820190508181036000830152613c4d8184613494565b905092915050565b60006020820190508181036000830152613c6f81846135fd565b905092915050565b60006020820190508181036000830152613c90816136e6565b9050919050565b60006020820190508181036000830152613cb081613709565b9050919050565b60006020820190508181036000830152613cd08161372c565b9050919050565b60006020820190508181036000830152613cf08161374f565b9050919050565b60006020820190508181036000830152613d1081613772565b9050919050565b60006020820190508181036000830152613d3081613795565b9050919050565b60006020820190508181036000830152613d50816137b8565b9050919050565b60006020820190508181036000830152613d70816137db565b9050919050565b60006020820190508181036000830152613d90816137fe565b9050919050565b60006020820190508181036000830152613db081613821565b9050919050565b60006020820190508181036000830152613dd081613844565b9050919050565b60006020820190508181036000830152613df081613867565b9050919050565b60006020820190508181036000830152613e108161388a565b9050919050565b60006020820190508181036000830152613e30816138ad565b9050919050565b60006020820190508181036000830152613e50816138d0565b9050919050565b60006020820190508181036000830152613e70816138f3565b9050919050565b60006020820190508181036000830152613e9081613916565b9050919050565b60006020820190508181036000830152613eb081613939565b9050919050565b60006020820190508181036000830152613ed08161395c565b9050919050565b60006020820190508181036000830152613ef08161397f565b9050919050565b60006020820190508181036000830152613f10816139a2565b9050919050565b60006020820190508181036000830152613f30816139e8565b9050919050565b60006020820190508181036000830152613f5081613a0b565b9050919050565b60006020820190508181036000830152613f7081613a2e565b9050919050565b60006020820190508181036000830152613f9081613a51565b9050919050565b600060a082019050613fac6000830188613a74565b613fb96020830187613415565b8181036040830152613fcb8186613494565b9050613fda6060830185613424565b8181036080830152613fec8184613494565b90509695505050505050565b600060808201905061400d6000830188613a74565b818103602083015261401f8187613494565b905061402e6040830186613ac0565b8181036060830152614041818486613442565b90509695505050505050565b60006080820190506140626000830187613a74565b81810360208301526140748186613494565b90506140836040830185613ac0565b81810360608301526140958184613494565b905095945050505050565b600060c0820190506140b56000830189613a74565b81810360208301526140c781886134fe565b905081810360408301526140db8187613494565b90506140ea6060830186613406565b6140f76080830185613415565b81810360a08301526141098184613494565b9050979650505050505050565b600060208201905061412b6000830184613a9a565b92915050565b60006040820190506141466000830185613a9a565b6141536020830184613433565b9392505050565b6000614164614175565b90506141708282614447565b919050565b6000604051905090565b600067ffffffffffffffff82111561419a576141996145ca565b5b6141a382614617565b9050602081019050919050565b600067ffffffffffffffff8211156141cb576141ca6145ca565b5b6141d482614617565b9050602081019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614264826143a8565b915061426f836143a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142a4576142a361450e565b5b828201905092915050565b60006142ba826143a8565b91506142c5836143a8565b9250826142d5576142d461453d565b5b828204905092915050565b60006142eb826143a8565b91506142f6836143a8565b9250828210156143095761430861450e565b5b828203905092915050565b600061431f82614388565b9050919050565b600061433182614388565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156144005780820151818401526020810190506143e5565b8381111561440f576000848401525b50505050565b6000600282049050600182168061442d57607f821691505b602082108114156144415761444061456c565b5b50919050565b61445082614617565b810181811067ffffffffffffffff8211171561446f5761446e6145ca565b5b80604052505050565b6000614483826143a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144b6576144b561450e565b5b600182019050919050565b60006144cc82614628565b9050919050565b6000819050919050565b60006144e8826143a8565b91506144f3836143a8565b9250826145035761450261453d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f47473a206d73672e76616c7565206e6f7420656e6f75676820746f20636f766560008201527f72206d6573736167654665652e2053656e642067617320666f72206d6573736160208201527f6765206665657300000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5468697320636861696e2069732063757272656e746c7920756e617661696c6160008201527f626c6520666f722074726176656c000000000000000000000000000000000000602082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f596f75206d757374206f776e2074686520746f6b656e20746f2074726176657260008201527f7365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f47473a204d61782032204e46547320706572207472616e73616374696f6e0000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b7f47473a204d696e74206578636565647320737570706c79000000000000000000600082015250565b614d1481614314565b8114614d1f57600080fd5b50565b614d2b81614326565b8114614d3657600080fd5b50565b614d4281614338565b8114614d4d57600080fd5b50565b614d598161434e565b8114614d6457600080fd5b50565b614d708161437a565b8114614d7b57600080fd5b50565b614d87816143a8565b8114614d9257600080fd5b50565b614d9e816143b2565b8114614da957600080fd5b50565b614db5816143c6565b8114614dc057600080fd5b5056fea264697066735822122056a7c497b94aed8b720c47e68d3fb52bc8d65cc26d2fdfa6fe80c2354deeb14f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 574,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 887,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 889,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 893,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 897,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 901,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 907,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 910,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "baseExtension",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "endpoint",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILayerZeroEndpoint)816"
      },
      {
        "astId": 25,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage)))"
      },
      {
        "astId": 29,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 294,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 296,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 299,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 302,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "MAX_MINT_ETHEREUM",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 305,
        "contract": "contracts/SecoNFT.sol:SecoNFT",
        "label": "gasForDestinationLzReceive",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)816": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FailedMessages)16_storage)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(FailedMessages)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NonblockingReceiver.FailedMessages)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedMessages)16_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FailedMessages)16_storage": {
        "encoding": "inplace",
        "label": "struct NonblockingReceiver.FailedMessages",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/SecoNFT.sol:SecoNFT",
            "label": "payloadLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15,
            "contract": "contracts/SecoNFT.sol:SecoNFT",
            "label": "payloadHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}