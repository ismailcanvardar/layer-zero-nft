{
  "address": "0x13ad66fa911CC17f708113dfa09888D52109CEC1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_revealUrl",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "sent",
          "type": "bool"
        }
      ],
      "name": "FailedToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "senderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "messageFee",
          "type": "uint256"
        }
      ],
      "name": "InsufficientMessageFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalMinted",
          "type": "uint256"
        }
      ],
      "name": "MintAmountExceeds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        }
      ],
      "name": "MintExceedsSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "mintLimitPerTxn",
          "type": "uint256"
        }
      ],
      "name": "MintLimitPerTxn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddress",
          "type": "address"
        }
      ],
      "name": "OnlyTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OnlyWhitelist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "UnavailableChain",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payloadLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasForDestinationLzReceive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "grantWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintLimitPerTxn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "revokeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "setGasForDestinationLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintLimitPerTxn",
          "type": "uint256"
        }
      ],
      "name": "setMintLimitPerTxn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_trustedRemote",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "traverseChains",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6aee3b21a4b7e3efb6ce8c88ebb9002058cfef93eee9b71476c890302b129fee",
  "receipt": {
    "to": null,
    "from": "0x65A2175dbc2FC1621E47823788519f25a41E24bb",
    "contractAddress": "0x13ad66fa911CC17f708113dfa09888D52109CEC1",
    "transactionIndex": 9,
    "gasUsed": "5090415",
    "logsBloom": "0x
    "blockHash": "0xa51b0402fdf11574957e1b24f0e4761e924fae51c1b488dbc7a9b76a43359f6d",
    "transactionHash": "0x6aee3b21a4b7e3efb6ce8c88ebb9002058cfef93eee9b71476c890302b129fee",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 18987467,
        "transactionHash": "0x6aee3b21a4b7e3efb6ce8c88ebb9002058cfef93eee9b71476c890302b129fee",
        "address": "0x13ad66fa911CC17f708113dfa09888D52109CEC1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000065a2175dbc2fc1621e47823788519f25a41e24bb"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xa51b0402fdf11574957e1b24f0e4761e924fae51c1b488dbc7a9b76a43359f6d"
      }
    ],
    "blockNumber": 18987467,
    "cumulativeGasUsed": "5941331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmTRmsuXPdjb8hV6Rrh7a1Q1VKS1aUNsTeeKMRnyHbUbve/",
    "0x6Fcb97553D41516Cb228ac03FdC8B9a0a9df04A1",
    10,
    20,
    "ipfs://QmULL7LpdRoY5e7v2wPzpqJWPFXN3SeFhpwfJCE78VUgVY/hidden.json"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e2c62b312cd760f658ffef969c7d848",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_revealUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"name\":\"FailedToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageFee\",\"type\":\"uint256\"}],\"name\":\"InsufficientMessageFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"}],\"name\":\"MintAmountExceeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"}],\"name\":\"MintExceedsSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mintLimitPerTxn\",\"type\":\"uint256\"}],\"name\":\"MintLimitPerTxn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OnlyTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OnlyWhitelist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"UnavailableChain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForDestinationLzReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"grantWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimitPerTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"revokeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setGasForDestinationLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintLimitPerTxn\",\"type\":\"uint256\"}],\"name\":\"setMintLimitPerTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_trustedRemote\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"traverseChains\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmniTestNFT.sol\":\"OmniTestNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NonblockingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\\n    ILayerZeroEndpoint internal endpoint;\\n\\n    struct FailedMessages {\\n        uint256 payloadLength;\\n        bytes32 payloadHash;\\n    }\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))\\n        public failedMessages;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event MessageFailed(\\n        uint16 _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _payload\\n    );\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\\n        require(\\n            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\\n                keccak256(_srcAddress) ==\\n                keccak256(trustedRemoteLookup[_srcChainId]),\\n            \\\"NonblockingReceiver: invalid source sending contract\\\"\\n        );\\n\\n        // try-catch all errors/exceptions\\n        // having failed messages does not block messages passing\\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(\\n                _payload.length,\\n                keccak256(_payload)\\n            );\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function onLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public {\\n        // only internal transaction\\n        require(\\n            msg.sender == address(this),\\n            \\\"NonblockingReceiver: caller must be Bridge.\\\"\\n        );\\n\\n        // handle incoming message\\n        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _txParam\\n    ) internal {\\n        endpoint.send{value: msg.value}(\\n            _dstChainId,\\n            trustedRemoteLookup[_dstChainId],\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _txParam\\n        );\\n    }\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external payable {\\n        // assert there is message to retry\\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][\\n            _srcAddress\\n        ][_nonce];\\n        require(\\n            failedMsg.payloadHash != bytes32(0),\\n            \\\"NonblockingReceiver: no stored message\\\"\\n        );\\n        require(\\n            _payload.length == failedMsg.payloadLength &&\\n                keccak256(_payload) == failedMsg.payloadHash,\\n            \\\"LayerZero: invalid payload\\\"\\n        );\\n        // clear the stored message\\n        failedMsg.payloadLength = 0;\\n        failedMsg.payloadHash = bytes32(0);\\n        // execute the message. revert if it fails again\\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)\\n        external\\n        onlyOwner\\n    {\\n        trustedRemoteLookup[_chainId] = _trustedRemote;\\n    }\\n}\\n\",\"keccak256\":\"0x739b953ff16901a93745fcc13fcbb962065c6cd9d93805c5e5f9815140e24d03\",\"license\":\"GPL-3.0\"},\"contracts/OmniTestNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"./NonblockingReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract OmniTestNFT is Ownable, ERC721, NonblockingReceiver {\\n    string private baseURI;\\n    uint256 public nextTokenId;\\n    uint256 public immutable maxMint;\\n    uint256 public mintLimitPerTxn = 2;\\n    string private baseExtension = \\\".json\\\";\\n    bool public paused;\\n\\n    mapping(address => bool) public whitelist;\\n    mapping(address => uint256) public mintCounter;\\n\\n    uint256 public gasForDestinationLzReceive = 350000;\\n\\n    bool private revealed = false;\\n    string private revealUrl;\\n\\n    constructor(\\n        string memory _baseUri,\\n        address _lzEndpoint,\\n        uint256 _nextTokenId,\\n        uint256 _maxMint,\\n        string memory _revealUrl\\n    ) ERC721(\\\"OmniTestNFT\\\", \\\"OTNFT\\\") {\\n        endpoint = ILayerZeroEndpoint(_lzEndpoint);\\n        baseURI = _baseUri;\\n        nextTokenId = _nextTokenId;\\n        maxMint = _maxMint;\\n        revealUrl = _revealUrl;\\n    }\\n\\n    error MintExceedsSupply(\\n        uint8 numTokens,\\n        uint256 currentTokenId,\\n        uint256 maxMint\\n    );\\n    error MintLimitPerTxn(uint8 numTokens, uint256 mintLimitPerTxn);\\n    error OnlyTokenOwner(address callerAddress);\\n    error UnavailableChain(uint16 chainId);\\n    error InsufficientMessageFee(uint256 senderAmount, uint256 messageFee);\\n    error FailedToWithdraw(bool sent);\\n    error OnlyWhitelist(address user);\\n    error MintAmountExceeds(address user, uint256 totalMinted);\\n\\n    modifier onlyTokenOwner(uint256 tokenId) {\\n        if (msg.sender != ownerOf(tokenId)) {\\n            revert OnlyTokenOwner({callerAddress: msg.sender});\\n        }\\n        _;\\n    }\\n\\n    modifier onlyWhitelist() {\\n        if (whitelist[msg.sender] != true) {\\n            revert OnlyWhitelist({user: msg.sender});\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isAmountExceeds() {\\n        uint256 totalMinted = mintCounter[msg.sender];\\n        if (totalMinted >= mintLimitPerTxn) {\\n            revert MintAmountExceeds({\\n                user: msg.sender,\\n                totalMinted: totalMinted\\n            });\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isPaused() {\\n        require(paused == false, \\\"Contract Paused\\\");\\n        _;\\n    }\\n\\n    function grantWhitelist(address[] calldata _addresses) external onlyOwner {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function revokeWhitelist(address[] calldata _addresses) external onlyOwner {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            delete whitelist[_addresses[i]];\\n        }\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    // mint function\\n    // you can choose to mint 1 or 2\\n    // mint is free, but payments are accepted\\n    function mint(uint8 numTokens)\\n        external\\n        payable\\n        isPaused\\n        onlyWhitelist\\n        isAmountExceeds\\n    {\\n        if (numTokens > mintLimitPerTxn) {\\n            revert MintLimitPerTxn({\\n                numTokens: numTokens,\\n                mintLimitPerTxn: mintLimitPerTxn\\n            });\\n        }\\n        if (nextTokenId + numTokens >= maxMint) {\\n            revert MintExceedsSupply({\\n                numTokens: numTokens,\\n                currentTokenId: nextTokenId,\\n                maxMint: maxMint\\n            });\\n        }\\n\\n        for (uint256 i; i < numTokens; i++) {\\n            _safeMint(msg.sender, ++nextTokenId);\\n        }\\n\\n        mintCounter[msg.sender] = numTokens;\\n    }\\n\\n    // This function transfers the nft from your address on the\\n    // source chain to the same address on the destination chain\\n    function traverseChains(uint16 _chainId, uint256 tokenId)\\n        public\\n        payable\\n        onlyTokenOwner(tokenId)\\n    {\\n        if (trustedRemoteLookup[_chainId].length == 0) {\\n            revert UnavailableChain({chainId: _chainId});\\n        }\\n\\n        // burn NFT, eliminating it from circulation on src chain\\n        _burn(tokenId);\\n\\n        // abi.encode() the payload with the values to send\\n        bytes memory payload = abi.encode(msg.sender, tokenId);\\n\\n        // encode adapterParams to specify more gas for the destination\\n        uint16 version = 1;\\n        bytes memory adapterParams = abi.encodePacked(\\n            version,\\n            gasForDestinationLzReceive\\n        );\\n\\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\\n        // you will be refunded for extra gas paid\\n        (uint256 messageFee, ) = endpoint.estimateFees(\\n            _chainId,\\n            address(this),\\n            payload,\\n            false,\\n            adapterParams\\n        );\\n\\n        if (msg.value <= messageFee) {\\n            revert InsufficientMessageFee({\\n                senderAmount: msg.value,\\n                messageFee: messageFee\\n            });\\n        }\\n\\n        endpoint.send{value: msg.value}(\\n            _chainId, // destination chainId\\n            trustedRemoteLookup[_chainId], // destination address of nft contract\\n            payload, // abi.encoded()'ed bytes\\n            payable(msg.sender), // refund address\\n            address(0x0), // 'zroPaymentAddress' unused for this\\n            adapterParams // txParameters\\n        );\\n    }\\n\\n    function revealCollection() external onlyOwner {\\n        revealed = true;\\n    }\\n\\n    function setMintLimitPerTxn(uint256 _mintLimitPerTxn) external onlyOwner {\\n        mintLimitPerTxn = _mintLimitPerTxn;\\n    }\\n\\n    function setBaseExtension(string calldata _newBaseExtension)\\n        external\\n        onlyOwner\\n    {\\n        baseExtension = _newBaseExtension;\\n    }\\n\\n    function setBaseURI(string calldata _uri) external onlyOwner {\\n        baseURI = _uri;\\n    }\\n\\n    function donate() external payable {\\n        // thank you\\n    }\\n\\n    // This allows the devs to receive kind donations\\n    function withdraw(uint256 amt) external onlyOwner {\\n        (bool sent, ) = payable(owner()).call{value: amt}(\\\"\\\");\\n        if (sent == false) {\\n            revert FailedToWithdraw({sent: sent});\\n        }\\n    }\\n\\n    // just in case this fixed variable limits us from future integrations\\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {\\n        gasForDestinationLzReceive = newVal;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (revealed == true) {\\n            return\\n                bytes(baseURI).length > 0\\n                    ? string(\\n                        abi.encodePacked(\\n                            baseURI,\\n                            Strings.toString(tokenId),\\n                            baseExtension\\n                        )\\n                    )\\n                    : \\\"\\\";\\n        }\\n\\n        return revealUrl;\\n    }\\n\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal override {\\n        // decode\\n        (address toAddr, uint256 tokenId) = abi.decode(\\n            _payload,\\n            (address, uint256)\\n        );\\n\\n        // mint the tokens back into existence on destination chain\\n        _safeMint(toAddr, tokenId);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x14f58ec0b75662eb26bc32fdc29d3393c960b08ccfb139896246cd1743c7c5be\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x6ea0979972ee57a7546b84089b4f61ee8ef4343b4dfc08559afc13de48bace67\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\",\"keccak256\":\"0xe7dcec92e7e0f29ac06e048b93c9ea62a6c40bbeb1a8e0310a9b05c9785cd595\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0x79c54bf0c6d07d20ed02f1734a0e512f896f98d80d4a7bed23ac6c716f421cde\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102455760003560e01c80637533d78811610139578063a22cb465116100b6578063da3ef23f1161007a578063da3ef23f1461085d578063e985e9c514610886578063eb8d72b7146108c3578063ed88c68e146108ec578063f2fde38b146108f6578063f3234f401461091f57610245565b8063a22cb46514610796578063b88d4fde146107bf578063c87b56dd146107e8578063cf89fa0314610825578063d1deba1f1461084157610245565b8063943fb872116100fd578063943fb872146106b157806395d89b41146106da57806395f4eda7146107055780639b19251a14610730578063a1ac39071461076d57610245565b80637533d788146105b757806375794a3c146105f45780637d7cd7721461061f5780638da5cb5b146106485780638ee749121461067357610245565b80632e1a7d4d116101c75780636352211e1161018b5780636352211e146104df5780636ecd23061461051c57806370a0823114610538578063715018a6146105755780637501f7411461058c57610245565b80632e1a7d4d1461042257806340d0b4a91461044b57806342842e0e1461046257806355f804b31461048b5780635c975abb146104b457610245565b806313b3d0b71161020e57806313b3d0b71461034157806316c38b3c1461036a5780631c37a822146103935780631cdce9fe146103bc57806323b872dd146103f957610245565b80621d35671461024a57806301ffc9a71461027357806306fdde03146102b0578063081812fc146102db578063095ea7b314610318575b600080fd5b34801561025657600080fd5b50610271600480360381019061026c9190613c3e565b61094a565b005b34801561027f57600080fd5b5061029a600480360381019061029591906139f7565b610b8c565b6040516102a79190614529565b60405180910390f35b3480156102bc57600080fd5b506102c5610c6e565b6040516102d29190614566565b60405180910390f35b3480156102e757600080fd5b5061030260048036038101906102fd9190613d1d565b610d00565b60405161030f9190614499565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a919061393d565b610d85565b005b34801561034d57600080fd5b5061036860048036038101906103639190613d1d565b610e9d565b005b34801561037657600080fd5b50610391600480360381019061038c91906139ca565b610f23565b005b34801561039f57600080fd5b506103ba60048036038101906103b59190613c3e565b610fbc565b005b3480156103c857600080fd5b506103e360048036038101906103de919061377a565b61103c565b6040516103f091906149a2565b60405180910390f35b34801561040557600080fd5b50610420600480360381019061041b9190613827565b611054565b005b34801561042e57600080fd5b5061044960048036038101906104449190613d1d565b6110b4565b005b34801561045757600080fd5b506104606111f1565b005b34801561046e57600080fd5b5061048960048036038101906104849190613827565b61128a565b005b34801561049757600080fd5b506104b260048036038101906104ad9190613a51565b6112aa565b005b3480156104c057600080fd5b506104c961133c565b6040516104d69190614529565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190613d1d565b61134f565b6040516105139190614499565b60405180910390f35b61053660048036038101906105319190613d8a565b611401565b005b34801561054457600080fd5b5061055f600480360381019061055a919061377a565b6116eb565b60405161056c91906149a2565b60405180910390f35b34801561058157600080fd5b5061058a6117a3565b005b34801561059857600080fd5b506105a161182b565b6040516105ae91906149a2565b60405180910390f35b3480156105c357600080fd5b506105de60048036038101906105d99190613a9e565b61184f565b6040516105eb9190614544565b60405180910390f35b34801561060057600080fd5b506106096118ef565b60405161061691906149a2565b60405180910390f35b34801561062b57600080fd5b506106466004803603810190610641919061397d565b6118f5565b005b34801561065457600080fd5b5061065d611a16565b60405161066a9190614499565b60405180910390f35b34801561067f57600080fd5b5061069a60048036038101906106959190613b2b565b611a3f565b6040516106a89291906149bd565b60405180910390f35b3480156106bd57600080fd5b506106d860048036038101906106d39190613d1d565b611a93565b005b3480156106e657600080fd5b506106ef611b19565b6040516106fc9190614566565b60405180910390f35b34801561071157600080fd5b5061071a611bab565b60405161072791906149a2565b60405180910390f35b34801561073c57600080fd5b506107576004803603810190610752919061377a565b611bb1565b6040516107649190614529565b60405180910390f35b34801561077957600080fd5b50610794600480360381019061078f919061397d565b611bd1565b005b3480156107a257600080fd5b506107bd60048036038101906107b891906138fd565b611ce9565b005b3480156107cb57600080fd5b506107e660048036038101906107e1919061387a565b611cff565b005b3480156107f457600080fd5b5061080f600480360381019061080a9190613d1d565b611d61565b60405161081c9190614566565b60405180910390f35b61083f600480360381019061083a9190613cdd565b611e73565b005b61085b60048036038101906108569190613b9a565b612170565b005b34801561086957600080fd5b50610884600480360381019061087f9190613a51565b612310565b005b34801561089257600080fd5b506108ad60048036038101906108a891906137e7565b6123a2565b6040516108ba9190614529565b60405180910390f35b3480156108cf57600080fd5b506108ea60048036038101906108e59190613acb565b612436565b005b6108f46124e2565b005b34801561090257600080fd5b5061091d6004803603810190610918919061377a565b6124e4565b005b34801561092b57600080fd5b506109346125dc565b60405161094191906149a2565b60405180910390f35b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109a457600080fd5b600960008561ffff1661ffff16815260200190815260200160002080546109ca90614cf9565b90508351148015610a105750600960008561ffff1661ffff1681526020019081526020016000206040516109fe9190614410565b60405180910390208380519060200120145b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690614768565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b8152600401610a8e94939291906148d9565b600060405180830381600087803b158015610aa857600080fd5b505af1925050508015610ab9575060015b610b85576040518060400160405280825181526020018280519060200120815250600860008661ffff1661ffff16815260200190815260200160002084604051610b0391906143f9565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d84848484604051610b7894939291906148d9565b60405180910390a1610b86565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c5757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c675750610c66826125e2565b5b9050919050565b606060018054610c7d90614cf9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca990614cf9565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b5050505050905090565b6000610d0b8261264c565b610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4190614728565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d908261134f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df890614788565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e206126b8565b73ffffffffffffffffffffffffffffffffffffffff161480610e4f5750610e4e81610e496126b8565b6123a2565b5b610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8590614688565b60405180910390fd5b610e9883836126c0565b505050565b610ea56126b8565b73ffffffffffffffffffffffffffffffffffffffff16610ec3611a16565b73ffffffffffffffffffffffffffffffffffffffff1614610f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1090614748565b60405180910390fd5b80600c8190555050565b610f2b6126b8565b73ffffffffffffffffffffffffffffffffffffffff16610f49611a16565b73ffffffffffffffffffffffffffffffffffffffff1614610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690614748565b60405180910390fd5b80600e60006101000a81548160ff02191690831515021790555050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461102a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611021906146e8565b60405180910390fd5b61103684848484612779565b50505050565b60106020528060005260406000206000915090505481565b61106561105f6126b8565b826127a6565b6110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906147a8565b60405180910390fd5b6110af838383612884565b505050565b6110bc6126b8565b73ffffffffffffffffffffffffffffffffffffffff166110da611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112790614748565b60405180910390fd5b600061113a611a16565b73ffffffffffffffffffffffffffffffffffffffff168260405161115d90614458565b60006040518083038185875af1925050503d806000811461119a576040519150601f19603f3d011682016040523d82523d6000602084013e61119f565b606091505b505090506000151581151514156111ed57806040517f946ef7fb0000000000000000000000000000000000000000000000000000000081526004016111e49190614529565b60405180910390fd5b5050565b6111f96126b8565b73ffffffffffffffffffffffffffffffffffffffff16611217611a16565b73ffffffffffffffffffffffffffffffffffffffff161461126d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126490614748565b60405180910390fd5b6001601260006101000a81548160ff021916908315150217905550565b6112a583838360405180602001604052806000815250611cff565b505050565b6112b26126b8565b73ffffffffffffffffffffffffffffffffffffffff166112d0611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90614748565b60405180910390fd5b8181600a919061133792919061340d565b505050565b600e60009054906101000a900460ff1681565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ef906146c8565b60405180910390fd5b80915050919050565b60001515600e60009054906101000a900460ff16151514611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144e906147e8565b60405180910390fd5b60011515600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146114ec57336040517f641b51cb0000000000000000000000000000000000000000000000000000000081526004016114e39190614499565b60405180910390fd5b6000601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600c5481106115785733816040517f58e0ec0700000000000000000000000000000000000000000000000000000000815260040161156f929190614500565b60405180910390fd5b600c548260ff1611156115c65781600c546040517fceff16fc0000000000000000000000000000000000000000000000000000000081526004016115bd929190614a0f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008260ff16600b546115f89190614b3d565b106116605781600b547f00000000000000000000000000000000000000000000000000000000000000006040517f72ee72a500000000000000000000000000000000000000000000000000000000815260040161165793929190614a38565b60405180910390fd5b60005b8260ff1681101561169f5761168c33600b6000815461168190614d5c565b919050819055612aeb565b808061169790614d5c565b915050611663565b508160ff16601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561175c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611753906146a8565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117ab6126b8565b73ffffffffffffffffffffffffffffffffffffffff166117c9611a16565b73ffffffffffffffffffffffffffffffffffffffff161461181f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181690614748565b60405180910390fd5b6118296000612b09565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6009602052806000526040600020600091509050805461186e90614cf9565b80601f016020809104026020016040519081016040528092919081815260200182805461189a90614cf9565b80156118e75780601f106118bc576101008083540402835291602001916118e7565b820191906000526020600020905b8154815290600101906020018083116118ca57829003601f168201915b505050505081565b600b5481565b6118fd6126b8565b73ffffffffffffffffffffffffffffffffffffffff1661191b611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196890614748565b60405180910390fd5b60005b82829050811015611a11576001600f600085858581811061199857611997614e7f565b5b90506020020160208101906119ad919061377a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611a0990614d5c565b915050611974565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b611a9b6126b8565b73ffffffffffffffffffffffffffffffffffffffff16611ab9611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0690614748565b60405180910390fd5b8060118190555050565b606060028054611b2890614cf9565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5490614cf9565b8015611ba15780601f10611b7657610100808354040283529160200191611ba1565b820191906000526020600020905b815481529060010190602001808311611b8457829003601f168201915b5050505050905090565b600c5481565b600f6020528060005260406000206000915054906101000a900460ff1681565b611bd96126b8565b73ffffffffffffffffffffffffffffffffffffffff16611bf7611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4490614748565b60405180910390fd5b60005b82829050811015611ce457600f6000848484818110611c7257611c71614e7f565b5b9050602002016020810190611c87919061377a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558080611cdc90614d5c565b915050611c50565b505050565b611cfb611cf46126b8565b8383612bcd565b5050565b611d10611d0a6126b8565b836127a6565b611d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d46906147a8565b60405180910390fd5b611d5b84848484612d3a565b50505050565b606060011515601260009054906101000a900460ff1615151415611de0576000600a8054611d8e90614cf9565b905011611daa5760405180602001604052806000815250611dd9565b600a611db583612d96565b600d604051602001611dc993929190614427565b6040516020818303038152906040525b9050611e6e565b60138054611ded90614cf9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1990614cf9565b8015611e665780601f10611e3b57610100808354040283529160200191611e66565b820191906000526020600020905b815481529060010190602001808311611e4957829003601f168201915b505050505090505b919050565b80611e7d8161134f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611eec57336040517fef1d2393000000000000000000000000000000000000000000000000000000008152600401611ee39190614499565b60405180910390fd5b6000600960008561ffff1661ffff1681526020019081526020016000208054611f1490614cf9565b90501415611f5957826040517f12263be1000000000000000000000000000000000000000000000000000000008152600401611f509190614808565b60405180910390fd5b611f6282612ef7565b60003383604051602001611f77929190614500565b6040516020818303038152906040529050600060019050600081601154604051602001611fa592919061446d565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108830876000876040518663ffffffff1660e01b815260040161201c959493929190614823565b604080518083038186803b15801561203357600080fd5b505afa158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190613d4a565b5090508034116120b45734816040517f955eeb690000000000000000000000000000000000000000000000000000000081526004016120ab9291906149e6565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003489600960008c61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b81526004016121359695949392919061492c565b6000604051808303818588803b15801561214e57600080fd5b505af1158015612162573d6000803e3d6000fd5b505050505050505050505050565b6000600860008761ffff1661ffff1681526020019081526020016000208560405161219b91906143f9565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b81600101541415612210576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612207906147c8565b60405180910390fd5b8060000154838390501480156122405750806001015483836040516122369291906143e0565b6040518091039020145b61227f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227690614648565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b81526004016122d6959493929190614884565b600060405180830381600087803b1580156122f057600080fd5b505af1158015612304573d6000803e3d6000fd5b50505050505050505050565b6123186126b8565b73ffffffffffffffffffffffffffffffffffffffff16612336611a16565b73ffffffffffffffffffffffffffffffffffffffff161461238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238390614748565b60405180910390fd5b8181600d919061239d92919061340d565b505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61243e6126b8565b73ffffffffffffffffffffffffffffffffffffffff1661245c611a16565b73ffffffffffffffffffffffffffffffffffffffff16146124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a990614748565b60405180910390fd5b8181600960008661ffff1661ffff16815260200190815260200160002091906124dc929190613493565b50505050565b565b6124ec6126b8565b73ffffffffffffffffffffffffffffffffffffffff1661250a611a16565b73ffffffffffffffffffffffffffffffffffffffff1614612560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255790614748565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c7906145a8565b60405180910390fd5b6125d981612b09565b50565b60115481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166127338361134f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000808280602001905181019061279091906137a7565b9150915061279e8282612aeb565b505050505050565b60006127b18261264c565b6127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e790614668565b60405180910390fd5b60006127fb8361134f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061283d575061283c81856123a2565b5b8061287b57508373ffffffffffffffffffffffffffffffffffffffff1661286384610d00565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166128a48261134f565b73ffffffffffffffffffffffffffffffffffffffff16146128fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f1906145c8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561296a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296190614608565b60405180910390fd5b612975838383613014565b6129806000826126c0565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129d09190614bc4565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a279190614b3d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612ae6838383613019565b505050565b612b0582826040518060200160405280600081525061301e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3390614628565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612d2d9190614529565b60405180910390a3505050565b612d45848484612884565b612d5184848484613079565b612d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8790614588565b60405180910390fd5b50505050565b60606000821415612dde576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ef2565b600082905060005b60008214612e10578080612df990614d5c565b915050600a82612e099190614b93565b9150612de6565b60008167ffffffffffffffff811115612e2c57612e2b614eae565b5b6040519080825280601f01601f191660200182016040528015612e5e5781602001600182028036833780820191505090505b5090505b60008514612eeb57600182612e779190614bc4565b9150600a85612e869190614dc1565b6030612e929190614b3d565b60f81b818381518110612ea857612ea7614e7f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612ee49190614b93565b9450612e62565b8093505050505b919050565b6000612f028261134f565b9050612f1081600084613014565b612f1b6000836126c0565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f6b9190614bc4565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461301081600084613019565b5050565b505050565b505050565b6130288383613210565b6130356000848484613079565b613074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161306b90614588565b60405180910390fd5b505050565b600061309a8473ffffffffffffffffffffffffffffffffffffffff166133ea565b15613203578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026130c36126b8565b8786866040518563ffffffff1660e01b81526004016130e594939291906144b4565b602060405180830381600087803b1580156130ff57600080fd5b505af192505050801561313057506040513d601f19601f8201168201806040525081019061312d9190613a24565b60015b6131b3573d8060008114613160576040519150601f19603f3d011682016040523d82523d6000602084013e613165565b606091505b506000815114156131ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131a290614588565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613208565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161327790614708565b60405180910390fd5b6132898161264c565b156132c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132c0906145e8565b60405180910390fd5b6132d560008383613014565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133259190614b3d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46133e660008383613019565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461341990614cf9565b90600052602060002090601f01602090048101928261343b5760008555613482565b82601f1061345457803560ff1916838001178555613482565b82800160010185558215613482579182015b82811115613481578235825591602001919060010190613466565b5b50905061348f9190613519565b5090565b82805461349f90614cf9565b90600052602060002090601f0160209004810192826134c15760008555613508565b82601f106134da57803560ff1916838001178555613508565b82800160010185558215613508579182015b828111156135075782358255916020019190600101906134ec565b5b5090506135159190613519565b5090565b5b8082111561353257600081600090555060010161351a565b5090565b600061354961354484614a94565b614a6f565b90508281526020810184848401111561356557613564614eec565b5b613570848285614cb7565b509392505050565b60008135905061358781615464565b92915050565b60008151905061359c8161547b565b92915050565b60008083601f8401126135b8576135b7614ee2565b5b8235905067ffffffffffffffff8111156135d5576135d4614edd565b5b6020830191508360208202830111156135f1576135f0614ee7565b5b9250929050565b60008135905061360781615492565b92915050565b60008135905061361c816154a9565b92915050565b600081519050613631816154a9565b92915050565b60008083601f84011261364d5761364c614ee2565b5b8235905067ffffffffffffffff81111561366a57613669614edd565b5b60208301915083600182028301111561368657613685614ee7565b5b9250929050565b600082601f8301126136a2576136a1614ee2565b5b81356136b2848260208601613536565b91505092915050565b60008083601f8401126136d1576136d0614ee2565b5b8235905067ffffffffffffffff8111156136ee576136ed614edd565b5b60208301915083600182028301111561370a57613709614ee7565b5b9250929050565b600081359050613720816154c0565b92915050565b600081359050613735816154d7565b92915050565b60008151905061374a816154d7565b92915050565b60008135905061375f816154ee565b92915050565b60008135905061377481615505565b92915050565b6000602082840312156137905761378f614ef6565b5b600061379e84828501613578565b91505092915050565b600080604083850312156137be576137bd614ef6565b5b60006137cc8582860161358d565b92505060206137dd8582860161373b565b9150509250929050565b600080604083850312156137fe576137fd614ef6565b5b600061380c85828601613578565b925050602061381d85828601613578565b9150509250929050565b6000806000606084860312156138405761383f614ef6565b5b600061384e86828701613578565b935050602061385f86828701613578565b925050604061387086828701613726565b9150509250925092565b6000806000806080858703121561389457613893614ef6565b5b60006138a287828801613578565b94505060206138b387828801613578565b93505060406138c487828801613726565b925050606085013567ffffffffffffffff8111156138e5576138e4614ef1565b5b6138f18782880161368d565b91505092959194509250565b6000806040838503121561391457613913614ef6565b5b600061392285828601613578565b9250506020613933858286016135f8565b9150509250929050565b6000806040838503121561395457613953614ef6565b5b600061396285828601613578565b925050602061397385828601613726565b9150509250929050565b6000806020838503121561399457613993614ef6565b5b600083013567ffffffffffffffff8111156139b2576139b1614ef1565b5b6139be858286016135a2565b92509250509250929050565b6000602082840312156139e0576139df614ef6565b5b60006139ee848285016135f8565b91505092915050565b600060208284031215613a0d57613a0c614ef6565b5b6000613a1b8482850161360d565b91505092915050565b600060208284031215613a3a57613a39614ef6565b5b6000613a4884828501613622565b91505092915050565b60008060208385031215613a6857613a67614ef6565b5b600083013567ffffffffffffffff811115613a8657613a85614ef1565b5b613a92858286016136bb565b92509250509250929050565b600060208284031215613ab457613ab3614ef6565b5b6000613ac284828501613711565b91505092915050565b600080600060408486031215613ae457613ae3614ef6565b5b6000613af286828701613711565b935050602084013567ffffffffffffffff811115613b1357613b12614ef1565b5b613b1f86828701613637565b92509250509250925092565b600080600060608486031215613b4457613b43614ef6565b5b6000613b5286828701613711565b935050602084013567ffffffffffffffff811115613b7357613b72614ef1565b5b613b7f8682870161368d565b9250506040613b9086828701613726565b9150509250925092565b600080600080600060808688031215613bb657613bb5614ef6565b5b6000613bc488828901613711565b955050602086013567ffffffffffffffff811115613be557613be4614ef1565b5b613bf18882890161368d565b9450506040613c0288828901613750565b935050606086013567ffffffffffffffff811115613c2357613c22614ef1565b5b613c2f88828901613637565b92509250509295509295909350565b60008060008060808587031215613c5857613c57614ef6565b5b6000613c6687828801613711565b945050602085013567ffffffffffffffff811115613c8757613c86614ef1565b5b613c938782880161368d565b9350506040613ca487828801613750565b925050606085013567ffffffffffffffff811115613cc557613cc4614ef1565b5b613cd18782880161368d565b91505092959194509250565b60008060408385031215613cf457613cf3614ef6565b5b6000613d0285828601613711565b9250506020613d1385828601613726565b9150509250929050565b600060208284031215613d3357613d32614ef6565b5b6000613d4184828501613726565b91505092915050565b60008060408385031215613d6157613d60614ef6565b5b6000613d6f8582860161373b565b9250506020613d808582860161373b565b9150509250929050565b600060208284031215613da057613d9f614ef6565b5b6000613dae84828501613765565b91505092915050565b613dc081614c0a565b82525050565b613dcf81614bf8565b82525050565b613dde81614c1c565b82525050565b613ded81614c28565b82525050565b6000613dff8385614b05565b9350613e0c838584614cb7565b613e1583614efb565b840190509392505050565b6000613e2c8385614b16565b9350613e39838584614cb7565b82840190509392505050565b6000613e5082614aef565b613e5a8185614b05565b9350613e6a818560208601614cc6565b613e7381614efb565b840191505092915050565b6000613e8982614aef565b613e938185614b16565b9350613ea3818560208601614cc6565b80840191505092915050565b60008154613ebc81614cf9565b613ec68186614b05565b94506001821660008114613ee15760018114613ef357613f26565b60ff1983168652602086019350613f26565b613efc85614ac5565b60005b83811015613f1e57815481890152600182019150602081019050613eff565b808801955050505b50505092915050565b60008154613f3c81614cf9565b613f468186614b16565b94506001821660008114613f615760018114613f7257613fa5565b60ff19831686528186019350613fa5565b613f7b85614ac5565b60005b83811015613f9d57815481890152600182019150602081019050613f7e565b838801955050505b50505092915050565b6000613fb982614afa565b613fc38185614b21565b9350613fd3818560208601614cc6565b613fdc81614efb565b840191505092915050565b6000613ff282614afa565b613ffc8185614b32565b935061400c818560208601614cc6565b80840191505092915050565b6000815461402581614cf9565b61402f8186614b32565b9450600182166000811461404a576001811461405b5761408e565b60ff1983168652818601935061408e565b61406485614ada565b60005b8381101561408657815481890152600182019150602081019050614067565b838801955050505b50505092915050565b60006140a4603283614b21565b91506140af82614f19565b604082019050919050565b60006140c7602683614b21565b91506140d282614f68565b604082019050919050565b60006140ea602583614b21565b91506140f582614fb7565b604082019050919050565b600061410d601c83614b21565b915061411882615006565b602082019050919050565b6000614130602483614b21565b915061413b8261502f565b604082019050919050565b6000614153601983614b21565b915061415e8261507e565b602082019050919050565b6000614176601a83614b21565b9150614181826150a7565b602082019050919050565b6000614199602c83614b21565b91506141a4826150d0565b604082019050919050565b60006141bc603883614b21565b91506141c78261511f565b604082019050919050565b60006141df602a83614b21565b91506141ea8261516e565b604082019050919050565b6000614202602983614b21565b915061420d826151bd565b604082019050919050565b6000614225602b83614b21565b91506142308261520c565b604082019050919050565b6000614248602083614b21565b91506142538261525b565b602082019050919050565b600061426b602c83614b21565b915061427682615284565b604082019050919050565b600061428e602083614b21565b9150614299826152d3565b602082019050919050565b60006142b1603483614b21565b91506142bc826152fc565b604082019050919050565b60006142d4602183614b21565b91506142df8261534b565b604082019050919050565b60006142f7600083614b16565b91506143028261539a565b600082019050919050565b600061431a603183614b21565b91506143258261539d565b604082019050919050565b600061433d602683614b21565b9150614348826153ec565b604082019050919050565b6000614360600f83614b21565b915061436b8261543b565b602082019050919050565b61437f81614c5e565b82525050565b61439661439182614c5e565b614da5565b82525050565b6143a581614c8c565b82525050565b6143bc6143b782614c8c565b614db7565b82525050565b6143cb81614c96565b82525050565b6143da81614caa565b82525050565b60006143ed828486613e20565b91508190509392505050565b60006144058284613e7e565b915081905092915050565b600061441c8284613f2f565b915081905092915050565b60006144338286614018565b915061443f8285613fe7565b915061444b8284614018565b9150819050949350505050565b6000614463826142ea565b9150819050919050565b60006144798285614385565b60028201915061448982846143ab565b6020820191508190509392505050565b60006020820190506144ae6000830184613dc6565b92915050565b60006080820190506144c96000830187613dc6565b6144d66020830186613dc6565b6144e3604083018561439c565b81810360608301526144f58184613e45565b905095945050505050565b60006040820190506145156000830185613dc6565b614522602083018461439c565b9392505050565b600060208201905061453e6000830184613dd5565b92915050565b6000602082019050818103600083015261455e8184613e45565b905092915050565b600060208201905081810360008301526145808184613fae565b905092915050565b600060208201905081810360008301526145a181614097565b9050919050565b600060208201905081810360008301526145c1816140ba565b9050919050565b600060208201905081810360008301526145e1816140dd565b9050919050565b6000602082019050818103600083015261460181614100565b9050919050565b6000602082019050818103600083015261462181614123565b9050919050565b6000602082019050818103600083015261464181614146565b9050919050565b6000602082019050818103600083015261466181614169565b9050919050565b600060208201905081810360008301526146818161418c565b9050919050565b600060208201905081810360008301526146a1816141af565b9050919050565b600060208201905081810360008301526146c1816141d2565b9050919050565b600060208201905081810360008301526146e1816141f5565b9050919050565b6000602082019050818103600083015261470181614218565b9050919050565b600060208201905081810360008301526147218161423b565b9050919050565b600060208201905081810360008301526147418161425e565b9050919050565b6000602082019050818103600083015261476181614281565b9050919050565b60006020820190508181036000830152614781816142a4565b9050919050565b600060208201905081810360008301526147a1816142c7565b9050919050565b600060208201905081810360008301526147c18161430d565b9050919050565b600060208201905081810360008301526147e181614330565b9050919050565b6000602082019050818103600083015261480181614353565b9050919050565b600060208201905061481d6000830184614376565b92915050565b600060a0820190506148386000830188614376565b6148456020830187613dc6565b81810360408301526148578186613e45565b90506148666060830185613dd5565b81810360808301526148788184613e45565b90509695505050505050565b60006080820190506148996000830188614376565b81810360208301526148ab8187613e45565b90506148ba60408301866143c2565b81810360608301526148cd818486613df3565b90509695505050505050565b60006080820190506148ee6000830187614376565b81810360208301526149008186613e45565b905061490f60408301856143c2565b81810360608301526149218184613e45565b905095945050505050565b600060c0820190506149416000830189614376565b81810360208301526149538188613eaf565b905081810360408301526149678187613e45565b90506149766060830186613db7565b6149836080830185613dc6565b81810360a08301526149958184613e45565b9050979650505050505050565b60006020820190506149b7600083018461439c565b92915050565b60006040820190506149d2600083018561439c565b6149df6020830184613de4565b9392505050565b60006040820190506149fb600083018561439c565b614a08602083018461439c565b9392505050565b6000604082019050614a2460008301856143d1565b614a31602083018461439c565b9392505050565b6000606082019050614a4d60008301866143d1565b614a5a602083018561439c565b614a67604083018461439c565b949350505050565b6000614a79614a8a565b9050614a858282614d2b565b919050565b6000604051905090565b600067ffffffffffffffff821115614aaf57614aae614eae565b5b614ab882614efb565b9050602081019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614b4882614c8c565b9150614b5383614c8c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614b8857614b87614df2565b5b828201905092915050565b6000614b9e82614c8c565b9150614ba983614c8c565b925082614bb957614bb8614e21565b5b828204905092915050565b6000614bcf82614c8c565b9150614bda83614c8c565b925082821015614bed57614bec614df2565b5b828203905092915050565b6000614c0382614c6c565b9050919050565b6000614c1582614c6c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614ce4578082015181840152602081019050614cc9565b83811115614cf3576000848401525b50505050565b60006002820490506001821680614d1157607f821691505b60208210811415614d2557614d24614e50565b5b50919050565b614d3482614efb565b810181811067ffffffffffffffff82111715614d5357614d52614eae565b5b80604052505050565b6000614d6782614c8c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d9a57614d99614df2565b5b600182019050919050565b6000614db082614f0c565b9050919050565b6000819050919050565b6000614dcc82614c8c565b9150614dd783614c8c565b925082614de757614de6614e21565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f436f6e7472616374205061757365640000000000000000000000000000000000600082015250565b61546d81614bf8565b811461547857600080fd5b50565b61548481614c0a565b811461548f57600080fd5b50565b61549b81614c1c565b81146154a657600080fd5b50565b6154b281614c32565b81146154bd57600080fd5b50565b6154c981614c5e565b81146154d457600080fd5b50565b6154e081614c8c565b81146154eb57600080fd5b50565b6154f781614c96565b811461550257600080fd5b50565b61550e81614caa565b811461551957600080fd5b5056fea26469706673582212208570c4993d8f5e71889abf5f8de0c9a47d3401bb31730014c8990076b74ca05964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1699,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "endpoint",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILayerZeroEndpoint)2707"
      },
      {
        "astId": 1713,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)))"
      },
      {
        "astId": 1717,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1983,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1985,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1990,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "mintLimitPerTxn",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1993,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "baseExtension",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1995,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "paused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1999,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "whitelist",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2003,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "mintCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2006,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "gasForDestinationLzReceive",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2009,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "revealed",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2011,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "revealUrl",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)2707": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NonblockingReceiver.FailedMessages)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedMessages)1704_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FailedMessages)1704_storage": {
        "encoding": "inplace",
        "label": "struct NonblockingReceiver.FailedMessages",
        "members": [
          {
            "astId": 1701,
            "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
            "label": "payloadLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1703,
            "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
            "label": "payloadHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}