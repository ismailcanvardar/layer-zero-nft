{
  "address": "0x2C2ACA014bdCCdfef5fa31B75D1A4e5121573B3b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payloadLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "setGasForDestinationLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_trustedRemote",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "traverseChains",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x862f73efb93f38b67bef9c525bcd58e2e65c59db0daff5ad4c91555c9de6a2f1",
  "receipt": {
    "to": null,
    "from": "0xcB1903187B884AF312Fa6BeC3D2C44DE0038e7fB",
    "contractAddress": "0x2C2ACA014bdCCdfef5fa31B75D1A4e5121573B3b",
    "transactionIndex": 20,
    "gasUsed": "4516979",
    "logsBloom": "0x
    "blockHash": "0x4e8170a82a9b18b29c9a456e6fcb3e6044cd09987b1c7455639860bb7a6e2cc9",
    "transactionHash": "0x862f73efb93f38b67bef9c525bcd58e2e65c59db0daff5ad4c91555c9de6a2f1",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 12213551,
        "transactionHash": "0x862f73efb93f38b67bef9c525bcd58e2e65c59db0daff5ad4c91555c9de6a2f1",
        "address": "0x2C2ACA014bdCCdfef5fa31B75D1A4e5121573B3b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb1903187b884af312fa6bec3d2c44de0038e7fb"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x4e8170a82a9b18b29c9a456e6fcb3e6044cd09987b1c7455639860bb7a6e2cc9"
      }
    ],
    "blockNumber": 12213551,
    "cumulativeGasUsed": "5514889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmfDsidjLfMZWd4BJUJy5vKjS9J1GNXegtu4kc8FPND1HL",
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706"
  ],
  "numDeployments": 1,
  "solcInputHash": "6015e328f50cef2a8aece50b472367c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setGasForDestinationLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_trustedRemote\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"traverseChains\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestNFT.sol\":\"TestNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/NonblockingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\\n    ILayerZeroEndpoint internal endpoint;\\n\\n    struct FailedMessages {\\n        uint256 payloadLength;\\n        bytes32 payloadHash;\\n    }\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))\\n        public failedMessages;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event MessageFailed(\\n        uint16 _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _payload\\n    );\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\\n        require(\\n            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\\n                keccak256(_srcAddress) ==\\n                keccak256(trustedRemoteLookup[_srcChainId]),\\n            \\\"NonblockingReceiver: invalid source sending contract\\\"\\n        );\\n\\n        // try-catch all errors/exceptions\\n        // having failed messages does not block messages passing\\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(\\n                _payload.length,\\n                keccak256(_payload)\\n            );\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function onLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public {\\n        // only internal transaction\\n        require(\\n            msg.sender == address(this),\\n            \\\"NonblockingReceiver: caller must be Bridge.\\\"\\n        );\\n\\n        // handle incoming message\\n        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _txParam\\n    ) internal {\\n        endpoint.send{value: msg.value}(\\n            _dstChainId,\\n            trustedRemoteLookup[_dstChainId],\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _txParam\\n        );\\n    }\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external payable {\\n        // assert there is message to retry\\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][\\n            _srcAddress\\n        ][_nonce];\\n        require(\\n            failedMsg.payloadHash != bytes32(0),\\n            \\\"NonblockingReceiver: no stored message\\\"\\n        );\\n        require(\\n            _payload.length == failedMsg.payloadLength &&\\n                keccak256(_payload) == failedMsg.payloadHash,\\n            \\\"LayerZero: invalid payload\\\"\\n        );\\n        // clear the stored message\\n        failedMsg.payloadLength = 0;\\n        failedMsg.payloadHash = bytes32(0);\\n        // execute the message. revert if it fails again\\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)\\n        external\\n        onlyOwner\\n    {\\n        trustedRemoteLookup[_chainId] = _trustedRemote;\\n    }\\n}\\n\",\"keccak256\":\"0xa9dd6893d64e4b602a66375e5e60a87f8e37807a36384c7c00d131c0537ecad6\",\"license\":\"GPL-3.0\"},\"contracts/TestNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\n// File: contracts/interfaces/ILayerZeroEndpoint.sol\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\nimport \\\"./access/Ownable.sol\\\";\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\nimport \\\"./token/ERC721/ERC721.sol\\\";\\n\\n// File: contracts/NonblockingReceiver.sol\\nimport \\\"./NonblockingReceiver.sol\\\";\\n\\n// File: contracts/GhostlyGhosts.sol\\ncontract TestNFT is Ownable, ERC721, NonblockingReceiver {\\n    address public _owner;\\n    string private baseURI;\\n    uint256 nextTokenId = 0;\\n    uint256 MAX_MINT_ETHEREUM = 3084;\\n\\n    uint256 gasForDestinationLzReceive = 350000;\\n\\n    constructor(string memory baseURI_, address _layerZeroEndpoint)\\n        ERC721(\\\"TestNFT\\\", \\\"TNFT\\\")\\n    {\\n        _owner = msg.sender;\\n        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\\n        baseURI = baseURI_;\\n    }\\n\\n    // mint function\\n    // you can choose to mint 1 or 2\\n    // mint is free, but payments are accepted\\n    function mint(uint8 numTokens) external payable {\\n        require(numTokens < 3, \\\"GG: Max 2 NFTs per transaction\\\");\\n        require(\\n            nextTokenId + numTokens <= MAX_MINT_ETHEREUM,\\n            \\\"GG: Mint exceeds supply\\\"\\n        );\\n        _safeMint(msg.sender, ++nextTokenId);\\n        if (numTokens == 2) {\\n            _safeMint(msg.sender, ++nextTokenId);\\n        }\\n    }\\n\\n    // This function transfers the nft from your address on the\\n    // source chain to the same address on the destination chain\\n    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {\\n        require(\\n            msg.sender == ownerOf(tokenId),\\n            \\\"You must own the token to traverse\\\"\\n        );\\n        require(\\n            trustedRemoteLookup[_chainId].length > 0,\\n            \\\"This chain is currently unavailable for travel\\\"\\n        );\\n\\n        // burn NFT, eliminating it from circulation on src chain\\n        _burn(tokenId);\\n\\n        // abi.encode() the payload with the values to send\\n        bytes memory payload = abi.encode(msg.sender, tokenId);\\n\\n        // encode adapterParams to specify more gas for the destination\\n        uint16 version = 1;\\n        bytes memory adapterParams = abi.encodePacked(\\n            version,\\n            gasForDestinationLzReceive\\n        );\\n\\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\\n        // you will be refunded for extra gas paid\\n        (uint256 messageFee, ) = endpoint.estimateFees(\\n            _chainId,\\n            address(this),\\n            payload,\\n            false,\\n            adapterParams\\n        );\\n\\n        require(\\n            msg.value >= messageFee,\\n            \\\"GG: msg.value not enough to cover messageFee. Send gas for message fees\\\"\\n        );\\n\\n        endpoint.send{value: msg.value}(\\n            _chainId, // destination chainId\\n            trustedRemoteLookup[_chainId], // destination address of nft contract\\n            payload, // abi.encoded()'ed bytes\\n            payable(msg.sender), // refund address\\n            address(0x0), // 'zroPaymentAddress' unused for this\\n            adapterParams // txParameters\\n        );\\n    }\\n\\n    function setBaseURI(string memory URI) external onlyOwner {\\n        baseURI = URI;\\n    }\\n\\n    function donate() external payable {\\n        // thank you\\n    }\\n\\n    // This allows the devs to receive kind donations\\n    function withdraw(uint256 amt) external onlyOwner {\\n        (bool sent, ) = payable(_owner).call{value: amt}(\\\"\\\");\\n        require(sent, \\\"GG: Failed to withdraw Ether\\\");\\n    }\\n\\n    // just in case this fixed variable limits us from future integrations\\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {\\n        gasForDestinationLzReceive = newVal;\\n    }\\n\\n    // ------------------\\n    // Internal Functions\\n    // ------------------\\n\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal override {\\n        // decode\\n        (address toAddr, uint256 tokenId) = abi.decode(\\n            _payload,\\n            (address, uint256)\\n        );\\n\\n        // mint the tokens back into existence on destination chain\\n        _safeMint(toAddr, tokenId);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x39819c0c11a9a83e6fa533f8f78c3e1dedcd95bf6d4bb0bc80410c1e8065b6c1\",\"license\":\"GPL-3.0\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa3b2bf9ab38b6fd0ce67e52285e5b83a2215fc43ff03cbfb0a21ecf289420a38\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n}\\n\",\"keccak256\":\"0x2a01969a1311c15f810be757b878306a97de4330f32b6bc4bb944a56b432b705\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf1f7fb164dcbad60bd6f2d47a4ffdef6958fa001b89ebe41fc22080636f962da\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0xd77b1a359bb4fd98aa7719780b5802a3a5e3ac398fe965313b0c45e6c2a229ca\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x36eabd67808d8ed36580a7be7d063968012464b1ab6e3d341fcbe2618564cca5\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x645fa540e1c39604e687998dc1ad77b6dc51baa6b77ecd0354ac84c3e9b8ee5d\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1bc8827436d98645be10971f0a6b0eb0f3d0ebaa96a0143816a30356d8ceef68\",\"license\":\"GPL-3.0\"},\"contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2446c9eb310bf1bf381c6677b0f87b5aad019c4b94450b76eeb785028702b3fa\",\"license\":\"GPL-3.0\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x663444a6897e4772b361be6aeadf03232e18a551d46fc6462933590c654a1164\",\"license\":\"GPL-3.0\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bd01a719fbdd377b2e93cca31f72c12ea4d857479d2e112086070d7d1c6348\",\"license\":\"GPL-3.0\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfb33ef7de5a99b3531421c9dbb412c482f17edc10811dd1e9a028207dabfeb6a\",\"license\":\"GPL-3.0\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5f98b083279b397e15bf650472b1ce9fa0ba788e8a105764993ff8beaf5f203e\",\"license\":\"GPL-3.0\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfe9948f8cc7ab976ae2f953c253219738ab0f6fd5bab39bd44ece8a35ebe415b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000600c55610c0c600d5562055730600e553480156200002357600080fd5b5060405162005296380380620052968339818101604052810190620000499190620003bd565b6040518060400160405280600781526020017f546573744e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544e465400000000000000000000000000000000000000000000000000000000815250620000d5620000c9620001ac60201b60201c565b620001b460201b60201c565b8160019080519060200190620000ed92919062000278565b5080600290805190602001906200010692919062000278565b50505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600b9080519060200190620001a392919062000278565b505050620005f5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200028690620004ec565b90600052602060002090601f016020900481019282620002aa5760008555620002f6565b82601f10620002c557805160ff1916838001178555620002f6565b82800160010185558215620002f6579182015b82811115620002f5578251825591602001919060010190620002d8565b5b50905062000305919062000309565b5090565b5b80821115620003245760008160009055506001016200030a565b5090565b60006200033f62000339846200044c565b62000423565b9050828152602081018484840111156200035e576200035d620005bb565b5b6200036b848285620004b6565b509392505050565b6000815190506200038481620005db565b92915050565b600082601f830112620003a257620003a1620005b6565b5b8151620003b484826020860162000328565b91505092915050565b60008060408385031215620003d757620003d6620005c5565b5b600083015167ffffffffffffffff811115620003f857620003f7620005c0565b5b62000406858286016200038a565b9250506020620004198582860162000373565b9150509250929050565b60006200042f62000442565b90506200043d828262000522565b919050565b6000604051905090565b600067ffffffffffffffff8211156200046a576200046962000587565b5b6200047582620005ca565b9050602081019050919050565b60006200048f8262000496565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620004d6578082015181840152602081019050620004b9565b83811115620004e6576000848401525b50505050565b600060028204905060018216806200050557607f821691505b602082108114156200051c576200051b62000558565b5b50919050565b6200052d82620005ca565b810181811067ffffffffffffffff821117156200054f576200054e62000587565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620005e68162000482565b8114620005f257600080fd5b50565b614c9180620006056000396000f3fe6080604052600436106101c15760003560e01c80637533d788116100f7578063b88d4fde11610095578063e985e9c511610064578063e985e9c514610623578063eb8d72b714610660578063ed88c68e14610689578063f2fde38b14610693576101c1565b8063b88d4fde14610585578063c87b56dd146105ae578063cf89fa03146105eb578063d1deba1f14610607576101c1565b8063943fb872116100d1578063943fb872146104dd57806395d89b4114610506578063a22cb46514610531578063b2bdfa7b1461055a576101c1565b80637533d788146104375780638da5cb5b146104745780638ee749121461049f576101c1565b80632e1a7d4d116101645780636352211e1161013e5780636352211e1461038a5780636ecd2306146103c757806370a08231146103e3578063715018a614610420576101c1565b80632e1a7d4d1461030f57806342842e0e1461033857806355f804b314610361576101c1565b8063081812fc116101a0578063081812fc14610257578063095ea7b3146102945780631c37a822146102bd57806323b872dd146102e6576101c1565b80621d3567146101c657806301ffc9a7146101ef57806306fdde031461022c575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e891906131c6565b6106bc565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612f83565b6108fe565b6040516102239190613ac5565b60405180910390f35b34801561023857600080fd5b506102416109e0565b60405161024e9190613b02565b60405180910390f35b34801561026357600080fd5b5061027e600480360381019061027991906132a5565b610a72565b60405161028b9190613a35565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190612f43565b610af7565b005b3480156102c957600080fd5b506102e460048036038101906102df91906131c6565b610c0f565b005b3480156102f257600080fd5b5061030d60048036038101906103089190612e2d565b610c8f565b005b34801561031b57600080fd5b50610336600480360381019061033191906132a5565b610cef565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612e2d565b610e3d565b005b34801561036d57600080fd5b5061038860048036038101906103839190612fdd565b610e5d565b005b34801561039657600080fd5b506103b160048036038101906103ac91906132a5565b610ef3565b6040516103be9190613a35565b60405180910390f35b6103e160048036038101906103dc9190613312565b610fa5565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612d80565b61108c565b6040516104179190613fc3565b60405180910390f35b34801561042c57600080fd5b50610435611144565b005b34801561044357600080fd5b5061045e60048036038101906104599190613026565b6111cc565b60405161046b9190613ae0565b60405180910390f35b34801561048057600080fd5b5061048961126c565b6040516104969190613a35565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c191906130b3565b611295565b6040516104d4929190613fde565b60405180910390f35b3480156104e957600080fd5b5061050460048036038101906104ff91906132a5565b6112e9565b005b34801561051257600080fd5b5061051b61136f565b6040516105289190613b02565b60405180910390f35b34801561053d57600080fd5b5061055860048036038101906105539190612f03565b611401565b005b34801561056657600080fd5b5061056f611417565b60405161057c9190613a35565b60405180910390f35b34801561059157600080fd5b506105ac60048036038101906105a79190612e80565b61143d565b005b3480156105ba57600080fd5b506105d560048036038101906105d091906132a5565b61149f565b6040516105e29190613b02565b60405180910390f35b61060560048036038101906106009190613265565b611546565b005b610621600480360381019061061c9190613122565b611839565b005b34801561062f57600080fd5b5061064a60048036038101906106459190612ded565b6119d9565b6040516106579190613ac5565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190613053565b611a6d565b005b610691611b19565b005b34801561069f57600080fd5b506106ba60048036038101906106b59190612d80565b611b1b565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071657600080fd5b600960008561ffff1661ffff168152602001908152602001600020805461073c906142ad565b905083511480156107825750600960008561ffff1661ffff16815260200190815260200160002060405161077091906139b9565b60405180910390208380519060200120145b6107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890613d44565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b81526004016108009493929190613efa565b600060405180830381600087803b15801561081a57600080fd5b505af192505050801561082b575060015b6108f7576040518060400160405280825181526020018280519060200120815250600860008661ffff1661ffff1681526020019081526020016000208460405161087591906139a2565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d848484846040516108ea9493929190613efa565b60405180910390a16108f8565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109c957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109d957506109d882611c13565b5b9050919050565b6060600180546109ef906142ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1b906142ad565b8015610a685780601f10610a3d57610100808354040283529160200191610a68565b820191906000526020600020905b815481529060010190602001808311610a4b57829003601f168201915b5050505050905090565b6000610a7d82611c7d565b610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613d04565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0282610ef3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613da4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b92611ce9565b73ffffffffffffffffffffffffffffffffffffffff161480610bc15750610bc081610bbb611ce9565b6119d9565b5b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790613c44565b60405180910390fd5b610c0a8383611cf1565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7490613ca4565b60405180910390fd5b610c8984848484611daa565b50505050565b610ca0610c9a611ce9565b82611dd7565b610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690613dc4565b60405180910390fd5b610cea838383611eb5565b505050565b610cf7611ce9565b73ffffffffffffffffffffffffffffffffffffffff16610d1561126c565b73ffffffffffffffffffffffffffffffffffffffff1614610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290613d24565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610db3906139f4565b60006040518083038185875af1925050503d8060008114610df0576040519150601f19603f3d011682016040523d82523d6000602084013e610df5565b606091505b5050905080610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090613e04565b60405180910390fd5b5050565b610e588383836040518060200160405280600081525061143d565b505050565b610e65611ce9565b73ffffffffffffffffffffffffffffffffffffffff16610e8361126c565b73ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090613d24565b60405180910390fd5b80600b9080519060200190610eef929190612a4f565b5050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9390613c84565b60405180910390fd5b80915050919050565b60038160ff1610610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290613cc4565b60405180910390fd5b600d548160ff16600c54610fff91906140f1565b1115611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103790613e24565b60405180910390fd5b61105e33600c6000815461105390614310565b919050819055612111565b60028160ff1614156110895761108833600c6000815461107d90614310565b919050819055612111565b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490613c64565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61114c611ce9565b73ffffffffffffffffffffffffffffffffffffffff1661116a61126c565b73ffffffffffffffffffffffffffffffffffffffff16146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790613d24565b60405180910390fd5b6111ca600061212f565b565b600960205280600052604060002060009150905080546111eb906142ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611217906142ad565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b6112f1611ce9565b73ffffffffffffffffffffffffffffffffffffffff1661130f61126c565b73ffffffffffffffffffffffffffffffffffffffff1614611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c90613d24565b60405180910390fd5b80600e8190555050565b60606002805461137e906142ad565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa906142ad565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b5050505050905090565b61141361140c611ce9565b83836121f3565b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61144e611448611ce9565b83611dd7565b61148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148490613dc4565b60405180910390fd5b61149984848484612360565b50505050565b60606114aa82611c7d565b6114e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e090613d84565b60405180910390fd5b60006114f36123bc565b90506000815111611513576040518060200160405280600081525061153e565b8061151d8461244e565b60405160200161152e9291906139d0565b6040516020818303038152906040525b915050919050565b61154f81610ef3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b390613c04565b60405180910390fd5b6000600960008461ffff1661ffff16815260200190815260200160002080546115e4906142ad565b905011611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90613bc4565b60405180910390fd5b61162f816125af565b60003382604051602001611644929190613a9c565b6040516020818303038152906040529050600060019050600081600e54604051602001611672929190613a09565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108730876000876040518663ffffffff1660e01b81526004016116e9959493929190613e44565b604080518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173891906132d2565b5090508034101561177e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177590613b24565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488600960008b61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b81526004016117ff96959493929190613f4d565b6000604051808303818588803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505050505050505050565b6000600860008761ffff1661ffff1681526020019081526020016000208560405161186491906139a2565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b816001015414156118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613de4565b60405180910390fd5b8060000154838390501480156119095750806001015483836040516118ff929190613989565b6040518091039020145b611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f90613be4565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b815260040161199f959493929190613ea5565b600060405180830381600087803b1580156119b957600080fd5b505af11580156119cd573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a75611ce9565b73ffffffffffffffffffffffffffffffffffffffff16611a9361126c565b73ffffffffffffffffffffffffffffffffffffffff1614611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae090613d24565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190611b13929190612ad5565b50505050565b565b611b23611ce9565b73ffffffffffffffffffffffffffffffffffffffff16611b4161126c565b73ffffffffffffffffffffffffffffffffffffffff1614611b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8e90613d24565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfe90613b64565b60405180910390fd5b611c108161212f565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d6483610ef3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611dc19190612dad565b91509150611dcf8282612111565b505050505050565b6000611de282611c7d565b611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1890613c24565b60405180910390fd5b6000611e2c83610ef3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e9b57508373ffffffffffffffffffffffffffffffffffffffff16611e8384610a72565b73ffffffffffffffffffffffffffffffffffffffff16145b80611eac5750611eab81856119d9565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ed582610ef3565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290613d64565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613b84565b60405180910390fd5b611fa68383836126c0565b611fb1600082611cf1565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120019190614178565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461205891906140f1565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61212b8282604051806020016040528060008152506126c5565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225990613ba4565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123539190613ac5565b60405180910390a3505050565b61236b848484611eb5565b61237784848484612720565b6123b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ad90613b44565b60405180910390fd5b50505050565b6060600b80546123cb906142ad565b80601f01602080910402602001604051908101604052809291908181526020018280546123f7906142ad565b80156124445780601f1061241957610100808354040283529160200191612444565b820191906000526020600020905b81548152906001019060200180831161242757829003601f168201915b5050505050905090565b60606000821415612496576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125aa565b600082905060005b600082146124c85780806124b190614310565b915050600a826124c19190614147565b915061249e565b60008167ffffffffffffffff8111156124e4576124e3614462565b5b6040519080825280601f01601f1916602001820160405280156125165781602001600182028036833780820191505090505b5090505b600085146125a35760018261252f9190614178565b9150600a8561253e9190614375565b603061254a91906140f1565b60f81b8183815181106125605761255f614433565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561259c9190614147565b945061251a565b8093505050505b919050565b60006125ba82610ef3565b90506125c8816000846126c0565b6125d3600083611cf1565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126239190614178565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b6126cf83836128b7565b6126dc6000848484612720565b61271b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271290613b44565b60405180910390fd5b505050565b60006127418473ffffffffffffffffffffffffffffffffffffffff16612a3c565b156128aa578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261276a611ce9565b8786866040518563ffffffff1660e01b815260040161278c9493929190613a50565b602060405180830381600087803b1580156127a657600080fd5b505af19250505080156127d757506040513d601f19601f820116820180604052508101906127d49190612fb0565b60015b61285a573d8060008114612807576040519150601f19603f3d011682016040523d82523d6000602084013e61280c565b606091505b50600081511415612852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284990613b44565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506128af565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291e90613ce4565b60405180910390fd5b612933600083836126c0565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461298391906140f1565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612a5b906142ad565b90600052602060002090601f016020900481019282612a7d5760008555612ac4565b82601f10612a9657805160ff1916838001178555612ac4565b82800160010185558215612ac4579182015b82811115612ac3578251825591602001919060010190612aa8565b5b509050612ad19190612b5b565b5090565b828054612ae1906142ad565b90600052602060002090601f016020900481019282612b035760008555612b4a565b82601f10612b1c57803560ff1916838001178555612b4a565b82800160010185558215612b4a579182015b82811115612b49578235825591602001919060010190612b2e565b5b509050612b579190612b5b565b5090565b5b80821115612b74576000816000905550600101612b5c565b5090565b6000612b8b612b868461402c565b614007565b905082815260208101848484011115612ba757612ba66144a0565b5b612bb284828561426b565b509392505050565b6000612bcd612bc88461405d565b614007565b905082815260208101848484011115612be957612be86144a0565b5b612bf484828561426b565b509392505050565b600081359050612c0b81614ba3565b92915050565b600081519050612c2081614bba565b92915050565b600081359050612c3581614bd1565b92915050565b600081359050612c4a81614be8565b92915050565b600081519050612c5f81614be8565b92915050565b60008083601f840112612c7b57612c7a614496565b5b8235905067ffffffffffffffff811115612c9857612c97614491565b5b602083019150836001820283011115612cb457612cb361449b565b5b9250929050565b600082601f830112612cd057612ccf614496565b5b8135612ce0848260208601612b78565b91505092915050565b600082601f830112612cfe57612cfd614496565b5b8135612d0e848260208601612bba565b91505092915050565b600081359050612d2681614bff565b92915050565b600081359050612d3b81614c16565b92915050565b600081519050612d5081614c16565b92915050565b600081359050612d6581614c2d565b92915050565b600081359050612d7a81614c44565b92915050565b600060208284031215612d9657612d956144aa565b5b6000612da484828501612bfc565b91505092915050565b60008060408385031215612dc457612dc36144aa565b5b6000612dd285828601612c11565b9250506020612de385828601612d41565b9150509250929050565b60008060408385031215612e0457612e036144aa565b5b6000612e1285828601612bfc565b9250506020612e2385828601612bfc565b9150509250929050565b600080600060608486031215612e4657612e456144aa565b5b6000612e5486828701612bfc565b9350506020612e6586828701612bfc565b9250506040612e7686828701612d2c565b9150509250925092565b60008060008060808587031215612e9a57612e996144aa565b5b6000612ea887828801612bfc565b9450506020612eb987828801612bfc565b9350506040612eca87828801612d2c565b925050606085013567ffffffffffffffff811115612eeb57612eea6144a5565b5b612ef787828801612cbb565b91505092959194509250565b60008060408385031215612f1a57612f196144aa565b5b6000612f2885828601612bfc565b9250506020612f3985828601612c26565b9150509250929050565b60008060408385031215612f5a57612f596144aa565b5b6000612f6885828601612bfc565b9250506020612f7985828601612d2c565b9150509250929050565b600060208284031215612f9957612f986144aa565b5b6000612fa784828501612c3b565b91505092915050565b600060208284031215612fc657612fc56144aa565b5b6000612fd484828501612c50565b91505092915050565b600060208284031215612ff357612ff26144aa565b5b600082013567ffffffffffffffff811115613011576130106144a5565b5b61301d84828501612ce9565b91505092915050565b60006020828403121561303c5761303b6144aa565b5b600061304a84828501612d17565b91505092915050565b60008060006040848603121561306c5761306b6144aa565b5b600061307a86828701612d17565b935050602084013567ffffffffffffffff81111561309b5761309a6144a5565b5b6130a786828701612c65565b92509250509250925092565b6000806000606084860312156130cc576130cb6144aa565b5b60006130da86828701612d17565b935050602084013567ffffffffffffffff8111156130fb576130fa6144a5565b5b61310786828701612cbb565b925050604061311886828701612d2c565b9150509250925092565b60008060008060006080868803121561313e5761313d6144aa565b5b600061314c88828901612d17565b955050602086013567ffffffffffffffff81111561316d5761316c6144a5565b5b61317988828901612cbb565b945050604061318a88828901612d56565b935050606086013567ffffffffffffffff8111156131ab576131aa6144a5565b5b6131b788828901612c65565b92509250509295509295909350565b600080600080608085870312156131e0576131df6144aa565b5b60006131ee87828801612d17565b945050602085013567ffffffffffffffff81111561320f5761320e6144a5565b5b61321b87828801612cbb565b935050604061322c87828801612d56565b925050606085013567ffffffffffffffff81111561324d5761324c6144a5565b5b61325987828801612cbb565b91505092959194509250565b6000806040838503121561327c5761327b6144aa565b5b600061328a85828601612d17565b925050602061329b85828601612d2c565b9150509250929050565b6000602082840312156132bb576132ba6144aa565b5b60006132c984828501612d2c565b91505092915050565b600080604083850312156132e9576132e86144aa565b5b60006132f785828601612d41565b925050602061330885828601612d41565b9150509250929050565b600060208284031215613328576133276144aa565b5b600061333684828501612d6b565b91505092915050565b613348816141be565b82525050565b613357816141ac565b82525050565b613366816141d0565b82525050565b613375816141dc565b82525050565b600061338783856140b9565b935061339483858461426b565b61339d836144af565b840190509392505050565b60006133b483856140ca565b93506133c183858461426b565b82840190509392505050565b60006133d8826140a3565b6133e281856140b9565b93506133f281856020860161427a565b6133fb816144af565b840191505092915050565b6000613411826140a3565b61341b81856140ca565b935061342b81856020860161427a565b80840191505092915050565b60008154613444816142ad565b61344e81866140b9565b94506001821660008114613469576001811461347b576134ae565b60ff19831686526020860193506134ae565b6134848561408e565b60005b838110156134a657815481890152600182019150602081019050613487565b808801955050505b50505092915050565b600081546134c4816142ad565b6134ce81866140ca565b945060018216600081146134e957600181146134fa5761352d565b60ff1983168652818601935061352d565b6135038561408e565b60005b8381101561352557815481890152600182019150602081019050613506565b838801955050505b50505092915050565b6000613541826140ae565b61354b81856140d5565b935061355b81856020860161427a565b613564816144af565b840191505092915050565b600061357a826140ae565b61358481856140e6565b935061359481856020860161427a565b80840191505092915050565b60006135ad6047836140d5565b91506135b8826144cd565b606082019050919050565b60006135d06032836140d5565b91506135db82614542565b604082019050919050565b60006135f36026836140d5565b91506135fe82614591565b604082019050919050565b60006136166024836140d5565b9150613621826145e0565b604082019050919050565b60006136396019836140d5565b91506136448261462f565b602082019050919050565b600061365c602e836140d5565b915061366782614658565b604082019050919050565b600061367f601a836140d5565b915061368a826146a7565b602082019050919050565b60006136a26022836140d5565b91506136ad826146d0565b604082019050919050565b60006136c5602c836140d5565b91506136d08261471f565b604082019050919050565b60006136e86038836140d5565b91506136f38261476e565b604082019050919050565b600061370b602a836140d5565b9150613716826147bd565b604082019050919050565b600061372e6029836140d5565b91506137398261480c565b604082019050919050565b6000613751602b836140d5565b915061375c8261485b565b604082019050919050565b6000613774601e836140d5565b915061377f826148aa565b602082019050919050565b60006137976020836140d5565b91506137a2826148d3565b602082019050919050565b60006137ba602c836140d5565b91506137c5826148fc565b604082019050919050565b60006137dd6020836140d5565b91506137e88261494b565b602082019050919050565b60006138006034836140d5565b915061380b82614974565b604082019050919050565b60006138236029836140d5565b915061382e826149c3565b604082019050919050565b6000613846602f836140d5565b915061385182614a12565b604082019050919050565b60006138696021836140d5565b915061387482614a61565b604082019050919050565b600061388c6000836140ca565b915061389782614ab0565b600082019050919050565b60006138af6031836140d5565b91506138ba82614ab3565b604082019050919050565b60006138d26026836140d5565b91506138dd82614b02565b604082019050919050565b60006138f5601c836140d5565b915061390082614b51565b602082019050919050565b60006139186017836140d5565b915061392382614b7a565b602082019050919050565b61393781614212565b82525050565b61394e61394982614212565b614359565b82525050565b61395d81614240565b82525050565b61397461396f82614240565b61436b565b82525050565b6139838161424a565b82525050565b60006139968284866133a8565b91508190509392505050565b60006139ae8284613406565b915081905092915050565b60006139c582846134b7565b915081905092915050565b60006139dc828561356f565b91506139e8828461356f565b91508190509392505050565b60006139ff8261387f565b9150819050919050565b6000613a15828561393d565b600282019150613a258284613963565b6020820191508190509392505050565b6000602082019050613a4a600083018461334e565b92915050565b6000608082019050613a65600083018761334e565b613a72602083018661334e565b613a7f6040830185613954565b8181036060830152613a9181846133cd565b905095945050505050565b6000604082019050613ab1600083018561334e565b613abe6020830184613954565b9392505050565b6000602082019050613ada600083018461335d565b92915050565b60006020820190508181036000830152613afa81846133cd565b905092915050565b60006020820190508181036000830152613b1c8184613536565b905092915050565b60006020820190508181036000830152613b3d816135a0565b9050919050565b60006020820190508181036000830152613b5d816135c3565b9050919050565b60006020820190508181036000830152613b7d816135e6565b9050919050565b60006020820190508181036000830152613b9d81613609565b9050919050565b60006020820190508181036000830152613bbd8161362c565b9050919050565b60006020820190508181036000830152613bdd8161364f565b9050919050565b60006020820190508181036000830152613bfd81613672565b9050919050565b60006020820190508181036000830152613c1d81613695565b9050919050565b60006020820190508181036000830152613c3d816136b8565b9050919050565b60006020820190508181036000830152613c5d816136db565b9050919050565b60006020820190508181036000830152613c7d816136fe565b9050919050565b60006020820190508181036000830152613c9d81613721565b9050919050565b60006020820190508181036000830152613cbd81613744565b9050919050565b60006020820190508181036000830152613cdd81613767565b9050919050565b60006020820190508181036000830152613cfd8161378a565b9050919050565b60006020820190508181036000830152613d1d816137ad565b9050919050565b60006020820190508181036000830152613d3d816137d0565b9050919050565b60006020820190508181036000830152613d5d816137f3565b9050919050565b60006020820190508181036000830152613d7d81613816565b9050919050565b60006020820190508181036000830152613d9d81613839565b9050919050565b60006020820190508181036000830152613dbd8161385c565b9050919050565b60006020820190508181036000830152613ddd816138a2565b9050919050565b60006020820190508181036000830152613dfd816138c5565b9050919050565b60006020820190508181036000830152613e1d816138e8565b9050919050565b60006020820190508181036000830152613e3d8161390b565b9050919050565b600060a082019050613e59600083018861392e565b613e66602083018761334e565b8181036040830152613e7881866133cd565b9050613e87606083018561335d565b8181036080830152613e9981846133cd565b90509695505050505050565b6000608082019050613eba600083018861392e565b8181036020830152613ecc81876133cd565b9050613edb604083018661397a565b8181036060830152613eee81848661337b565b90509695505050505050565b6000608082019050613f0f600083018761392e565b8181036020830152613f2181866133cd565b9050613f30604083018561397a565b8181036060830152613f4281846133cd565b905095945050505050565b600060c082019050613f62600083018961392e565b8181036020830152613f748188613437565b90508181036040830152613f8881876133cd565b9050613f97606083018661333f565b613fa4608083018561334e565b81810360a0830152613fb681846133cd565b9050979650505050505050565b6000602082019050613fd86000830184613954565b92915050565b6000604082019050613ff36000830185613954565b614000602083018461336c565b9392505050565b6000614011614022565b905061401d82826142df565b919050565b6000604051905090565b600067ffffffffffffffff82111561404757614046614462565b5b614050826144af565b9050602081019050919050565b600067ffffffffffffffff82111561407857614077614462565b5b614081826144af565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006140fc82614240565b915061410783614240565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561413c5761413b6143a6565b5b828201905092915050565b600061415282614240565b915061415d83614240565b92508261416d5761416c6143d5565b5b828204905092915050565b600061418382614240565b915061418e83614240565b9250828210156141a1576141a06143a6565b5b828203905092915050565b60006141b782614220565b9050919050565b60006141c982614220565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561429857808201518184015260208101905061427d565b838111156142a7576000848401525b50505050565b600060028204905060018216806142c557607f821691505b602082108114156142d9576142d8614404565b5b50919050565b6142e8826144af565b810181811067ffffffffffffffff8211171561430757614306614462565b5b80604052505050565b600061431b82614240565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561434e5761434d6143a6565b5b600182019050919050565b6000614364826144c0565b9050919050565b6000819050919050565b600061438082614240565b915061438b83614240565b92508261439b5761439a6143d5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f47473a206d73672e76616c7565206e6f7420656e6f75676820746f20636f766560008201527f72206d6573736167654665652e2053656e642067617320666f72206d6573736160208201527f6765206665657300000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5468697320636861696e2069732063757272656e746c7920756e617661696c6160008201527f626c6520666f722074726176656c000000000000000000000000000000000000602082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f596f75206d757374206f776e2074686520746f6b656e20746f2074726176657260008201527f7365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f47473a204d61782032204e46547320706572207472616e73616374696f6e0000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b7f47473a204d696e74206578636565647320737570706c79000000000000000000600082015250565b614bac816141ac565b8114614bb757600080fd5b50565b614bc3816141be565b8114614bce57600080fd5b50565b614bda816141d0565b8114614be557600080fd5b50565b614bf1816141e6565b8114614bfc57600080fd5b50565b614c0881614212565b8114614c1357600080fd5b50565b614c1f81614240565b8114614c2a57600080fd5b50565b614c368161424a565b8114614c4157600080fd5b50565b614c4d8161425e565b8114614c5857600080fd5b5056fea2646970667358221220f4599bbc83c812c577085cf17b27128f9c32aa9ff0cd3bac2c86f5c0692103ed64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c80637533d788116100f7578063b88d4fde11610095578063e985e9c511610064578063e985e9c514610623578063eb8d72b714610660578063ed88c68e14610689578063f2fde38b14610693576101c1565b8063b88d4fde14610585578063c87b56dd146105ae578063cf89fa03146105eb578063d1deba1f14610607576101c1565b8063943fb872116100d1578063943fb872146104dd57806395d89b4114610506578063a22cb46514610531578063b2bdfa7b1461055a576101c1565b80637533d788146104375780638da5cb5b146104745780638ee749121461049f576101c1565b80632e1a7d4d116101645780636352211e1161013e5780636352211e1461038a5780636ecd2306146103c757806370a08231146103e3578063715018a614610420576101c1565b80632e1a7d4d1461030f57806342842e0e1461033857806355f804b314610361576101c1565b8063081812fc116101a0578063081812fc14610257578063095ea7b3146102945780631c37a822146102bd57806323b872dd146102e6576101c1565b80621d3567146101c657806301ffc9a7146101ef57806306fdde031461022c575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e891906131c6565b6106bc565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612f83565b6108fe565b6040516102239190613ac5565b60405180910390f35b34801561023857600080fd5b506102416109e0565b60405161024e9190613b02565b60405180910390f35b34801561026357600080fd5b5061027e600480360381019061027991906132a5565b610a72565b60405161028b9190613a35565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190612f43565b610af7565b005b3480156102c957600080fd5b506102e460048036038101906102df91906131c6565b610c0f565b005b3480156102f257600080fd5b5061030d60048036038101906103089190612e2d565b610c8f565b005b34801561031b57600080fd5b50610336600480360381019061033191906132a5565b610cef565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612e2d565b610e3d565b005b34801561036d57600080fd5b5061038860048036038101906103839190612fdd565b610e5d565b005b34801561039657600080fd5b506103b160048036038101906103ac91906132a5565b610ef3565b6040516103be9190613a35565b60405180910390f35b6103e160048036038101906103dc9190613312565b610fa5565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612d80565b61108c565b6040516104179190613fc3565b60405180910390f35b34801561042c57600080fd5b50610435611144565b005b34801561044357600080fd5b5061045e60048036038101906104599190613026565b6111cc565b60405161046b9190613ae0565b60405180910390f35b34801561048057600080fd5b5061048961126c565b6040516104969190613a35565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c191906130b3565b611295565b6040516104d4929190613fde565b60405180910390f35b3480156104e957600080fd5b5061050460048036038101906104ff91906132a5565b6112e9565b005b34801561051257600080fd5b5061051b61136f565b6040516105289190613b02565b60405180910390f35b34801561053d57600080fd5b5061055860048036038101906105539190612f03565b611401565b005b34801561056657600080fd5b5061056f611417565b60405161057c9190613a35565b60405180910390f35b34801561059157600080fd5b506105ac60048036038101906105a79190612e80565b61143d565b005b3480156105ba57600080fd5b506105d560048036038101906105d091906132a5565b61149f565b6040516105e29190613b02565b60405180910390f35b61060560048036038101906106009190613265565b611546565b005b610621600480360381019061061c9190613122565b611839565b005b34801561062f57600080fd5b5061064a60048036038101906106459190612ded565b6119d9565b6040516106579190613ac5565b60405180910390f35b34801561066c57600080fd5b5061068760048036038101906106829190613053565b611a6d565b005b610691611b19565b005b34801561069f57600080fd5b506106ba60048036038101906106b59190612d80565b611b1b565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071657600080fd5b600960008561ffff1661ffff168152602001908152602001600020805461073c906142ad565b905083511480156107825750600960008561ffff1661ffff16815260200190815260200160002060405161077091906139b9565b60405180910390208380519060200120145b6107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890613d44565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b81526004016108009493929190613efa565b600060405180830381600087803b15801561081a57600080fd5b505af192505050801561082b575060015b6108f7576040518060400160405280825181526020018280519060200120815250600860008661ffff1661ffff1681526020019081526020016000208460405161087591906139a2565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d848484846040516108ea9493929190613efa565b60405180910390a16108f8565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109c957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109d957506109d882611c13565b5b9050919050565b6060600180546109ef906142ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1b906142ad565b8015610a685780601f10610a3d57610100808354040283529160200191610a68565b820191906000526020600020905b815481529060010190602001808311610a4b57829003601f168201915b5050505050905090565b6000610a7d82611c7d565b610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613d04565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0282610ef3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613da4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b92611ce9565b73ffffffffffffffffffffffffffffffffffffffff161480610bc15750610bc081610bbb611ce9565b6119d9565b5b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790613c44565b60405180910390fd5b610c0a8383611cf1565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7490613ca4565b60405180910390fd5b610c8984848484611daa565b50505050565b610ca0610c9a611ce9565b82611dd7565b610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690613dc4565b60405180910390fd5b610cea838383611eb5565b505050565b610cf7611ce9565b73ffffffffffffffffffffffffffffffffffffffff16610d1561126c565b73ffffffffffffffffffffffffffffffffffffffff1614610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290613d24565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610db3906139f4565b60006040518083038185875af1925050503d8060008114610df0576040519150601f19603f3d011682016040523d82523d6000602084013e610df5565b606091505b5050905080610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090613e04565b60405180910390fd5b5050565b610e588383836040518060200160405280600081525061143d565b505050565b610e65611ce9565b73ffffffffffffffffffffffffffffffffffffffff16610e8361126c565b73ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090613d24565b60405180910390fd5b80600b9080519060200190610eef929190612a4f565b5050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9390613c84565b60405180910390fd5b80915050919050565b60038160ff1610610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290613cc4565b60405180910390fd5b600d548160ff16600c54610fff91906140f1565b1115611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103790613e24565b60405180910390fd5b61105e33600c6000815461105390614310565b919050819055612111565b60028160ff1614156110895761108833600c6000815461107d90614310565b919050819055612111565b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490613c64565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61114c611ce9565b73ffffffffffffffffffffffffffffffffffffffff1661116a61126c565b73ffffffffffffffffffffffffffffffffffffffff16146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790613d24565b60405180910390fd5b6111ca600061212f565b565b600960205280600052604060002060009150905080546111eb906142ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611217906142ad565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b6112f1611ce9565b73ffffffffffffffffffffffffffffffffffffffff1661130f61126c565b73ffffffffffffffffffffffffffffffffffffffff1614611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c90613d24565b60405180910390fd5b80600e8190555050565b60606002805461137e906142ad565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa906142ad565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b5050505050905090565b61141361140c611ce9565b83836121f3565b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61144e611448611ce9565b83611dd7565b61148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148490613dc4565b60405180910390fd5b61149984848484612360565b50505050565b60606114aa82611c7d565b6114e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e090613d84565b60405180910390fd5b60006114f36123bc565b90506000815111611513576040518060200160405280600081525061153e565b8061151d8461244e565b60405160200161152e9291906139d0565b6040516020818303038152906040525b915050919050565b61154f81610ef3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b390613c04565b60405180910390fd5b6000600960008461ffff1661ffff16815260200190815260200160002080546115e4906142ad565b905011611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90613bc4565b60405180910390fd5b61162f816125af565b60003382604051602001611644929190613a9c565b6040516020818303038152906040529050600060019050600081600e54604051602001611672929190613a09565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108730876000876040518663ffffffff1660e01b81526004016116e9959493929190613e44565b604080518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173891906132d2565b5090508034101561177e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177590613b24565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488600960008b61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b81526004016117ff96959493929190613f4d565b6000604051808303818588803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505050505050505050565b6000600860008761ffff1661ffff1681526020019081526020016000208560405161186491906139a2565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b816001015414156118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613de4565b60405180910390fd5b8060000154838390501480156119095750806001015483836040516118ff929190613989565b6040518091039020145b611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f90613be4565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b815260040161199f959493929190613ea5565b600060405180830381600087803b1580156119b957600080fd5b505af11580156119cd573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a75611ce9565b73ffffffffffffffffffffffffffffffffffffffff16611a9361126c565b73ffffffffffffffffffffffffffffffffffffffff1614611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae090613d24565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190611b13929190612ad5565b50505050565b565b611b23611ce9565b73ffffffffffffffffffffffffffffffffffffffff16611b4161126c565b73ffffffffffffffffffffffffffffffffffffffff1614611b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8e90613d24565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfe90613b64565b60405180910390fd5b611c108161212f565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d6483610ef3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611dc19190612dad565b91509150611dcf8282612111565b505050505050565b6000611de282611c7d565b611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1890613c24565b60405180910390fd5b6000611e2c83610ef3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e9b57508373ffffffffffffffffffffffffffffffffffffffff16611e8384610a72565b73ffffffffffffffffffffffffffffffffffffffff16145b80611eac5750611eab81856119d9565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ed582610ef3565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290613d64565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613b84565b60405180910390fd5b611fa68383836126c0565b611fb1600082611cf1565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120019190614178565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461205891906140f1565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61212b8282604051806020016040528060008152506126c5565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225990613ba4565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123539190613ac5565b60405180910390a3505050565b61236b848484611eb5565b61237784848484612720565b6123b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ad90613b44565b60405180910390fd5b50505050565b6060600b80546123cb906142ad565b80601f01602080910402602001604051908101604052809291908181526020018280546123f7906142ad565b80156124445780601f1061241957610100808354040283529160200191612444565b820191906000526020600020905b81548152906001019060200180831161242757829003601f168201915b5050505050905090565b60606000821415612496576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125aa565b600082905060005b600082146124c85780806124b190614310565b915050600a826124c19190614147565b915061249e565b60008167ffffffffffffffff8111156124e4576124e3614462565b5b6040519080825280601f01601f1916602001820160405280156125165781602001600182028036833780820191505090505b5090505b600085146125a35760018261252f9190614178565b9150600a8561253e9190614375565b603061254a91906140f1565b60f81b8183815181106125605761255f614433565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561259c9190614147565b945061251a565b8093505050505b919050565b60006125ba82610ef3565b90506125c8816000846126c0565b6125d3600083611cf1565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126239190614178565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b6126cf83836128b7565b6126dc6000848484612720565b61271b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271290613b44565b60405180910390fd5b505050565b60006127418473ffffffffffffffffffffffffffffffffffffffff16612a3c565b156128aa578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261276a611ce9565b8786866040518563ffffffff1660e01b815260040161278c9493929190613a50565b602060405180830381600087803b1580156127a657600080fd5b505af19250505080156127d757506040513d601f19601f820116820180604052508101906127d49190612fb0565b60015b61285a573d8060008114612807576040519150601f19603f3d011682016040523d82523d6000602084013e61280c565b606091505b50600081511415612852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284990613b44565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506128af565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291e90613ce4565b60405180910390fd5b612933600083836126c0565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461298391906140f1565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612a5b906142ad565b90600052602060002090601f016020900481019282612a7d5760008555612ac4565b82601f10612a9657805160ff1916838001178555612ac4565b82800160010185558215612ac4579182015b82811115612ac3578251825591602001919060010190612aa8565b5b509050612ad19190612b5b565b5090565b828054612ae1906142ad565b90600052602060002090601f016020900481019282612b035760008555612b4a565b82601f10612b1c57803560ff1916838001178555612b4a565b82800160010185558215612b4a579182015b82811115612b49578235825591602001919060010190612b2e565b5b509050612b579190612b5b565b5090565b5b80821115612b74576000816000905550600101612b5c565b5090565b6000612b8b612b868461402c565b614007565b905082815260208101848484011115612ba757612ba66144a0565b5b612bb284828561426b565b509392505050565b6000612bcd612bc88461405d565b614007565b905082815260208101848484011115612be957612be86144a0565b5b612bf484828561426b565b509392505050565b600081359050612c0b81614ba3565b92915050565b600081519050612c2081614bba565b92915050565b600081359050612c3581614bd1565b92915050565b600081359050612c4a81614be8565b92915050565b600081519050612c5f81614be8565b92915050565b60008083601f840112612c7b57612c7a614496565b5b8235905067ffffffffffffffff811115612c9857612c97614491565b5b602083019150836001820283011115612cb457612cb361449b565b5b9250929050565b600082601f830112612cd057612ccf614496565b5b8135612ce0848260208601612b78565b91505092915050565b600082601f830112612cfe57612cfd614496565b5b8135612d0e848260208601612bba565b91505092915050565b600081359050612d2681614bff565b92915050565b600081359050612d3b81614c16565b92915050565b600081519050612d5081614c16565b92915050565b600081359050612d6581614c2d565b92915050565b600081359050612d7a81614c44565b92915050565b600060208284031215612d9657612d956144aa565b5b6000612da484828501612bfc565b91505092915050565b60008060408385031215612dc457612dc36144aa565b5b6000612dd285828601612c11565b9250506020612de385828601612d41565b9150509250929050565b60008060408385031215612e0457612e036144aa565b5b6000612e1285828601612bfc565b9250506020612e2385828601612bfc565b9150509250929050565b600080600060608486031215612e4657612e456144aa565b5b6000612e5486828701612bfc565b9350506020612e6586828701612bfc565b9250506040612e7686828701612d2c565b9150509250925092565b60008060008060808587031215612e9a57612e996144aa565b5b6000612ea887828801612bfc565b9450506020612eb987828801612bfc565b9350506040612eca87828801612d2c565b925050606085013567ffffffffffffffff811115612eeb57612eea6144a5565b5b612ef787828801612cbb565b91505092959194509250565b60008060408385031215612f1a57612f196144aa565b5b6000612f2885828601612bfc565b9250506020612f3985828601612c26565b9150509250929050565b60008060408385031215612f5a57612f596144aa565b5b6000612f6885828601612bfc565b9250506020612f7985828601612d2c565b9150509250929050565b600060208284031215612f9957612f986144aa565b5b6000612fa784828501612c3b565b91505092915050565b600060208284031215612fc657612fc56144aa565b5b6000612fd484828501612c50565b91505092915050565b600060208284031215612ff357612ff26144aa565b5b600082013567ffffffffffffffff811115613011576130106144a5565b5b61301d84828501612ce9565b91505092915050565b60006020828403121561303c5761303b6144aa565b5b600061304a84828501612d17565b91505092915050565b60008060006040848603121561306c5761306b6144aa565b5b600061307a86828701612d17565b935050602084013567ffffffffffffffff81111561309b5761309a6144a5565b5b6130a786828701612c65565b92509250509250925092565b6000806000606084860312156130cc576130cb6144aa565b5b60006130da86828701612d17565b935050602084013567ffffffffffffffff8111156130fb576130fa6144a5565b5b61310786828701612cbb565b925050604061311886828701612d2c565b9150509250925092565b60008060008060006080868803121561313e5761313d6144aa565b5b600061314c88828901612d17565b955050602086013567ffffffffffffffff81111561316d5761316c6144a5565b5b61317988828901612cbb565b945050604061318a88828901612d56565b935050606086013567ffffffffffffffff8111156131ab576131aa6144a5565b5b6131b788828901612c65565b92509250509295509295909350565b600080600080608085870312156131e0576131df6144aa565b5b60006131ee87828801612d17565b945050602085013567ffffffffffffffff81111561320f5761320e6144a5565b5b61321b87828801612cbb565b935050604061322c87828801612d56565b925050606085013567ffffffffffffffff81111561324d5761324c6144a5565b5b61325987828801612cbb565b91505092959194509250565b6000806040838503121561327c5761327b6144aa565b5b600061328a85828601612d17565b925050602061329b85828601612d2c565b9150509250929050565b6000602082840312156132bb576132ba6144aa565b5b60006132c984828501612d2c565b91505092915050565b600080604083850312156132e9576132e86144aa565b5b60006132f785828601612d41565b925050602061330885828601612d41565b9150509250929050565b600060208284031215613328576133276144aa565b5b600061333684828501612d6b565b91505092915050565b613348816141be565b82525050565b613357816141ac565b82525050565b613366816141d0565b82525050565b613375816141dc565b82525050565b600061338783856140b9565b935061339483858461426b565b61339d836144af565b840190509392505050565b60006133b483856140ca565b93506133c183858461426b565b82840190509392505050565b60006133d8826140a3565b6133e281856140b9565b93506133f281856020860161427a565b6133fb816144af565b840191505092915050565b6000613411826140a3565b61341b81856140ca565b935061342b81856020860161427a565b80840191505092915050565b60008154613444816142ad565b61344e81866140b9565b94506001821660008114613469576001811461347b576134ae565b60ff19831686526020860193506134ae565b6134848561408e565b60005b838110156134a657815481890152600182019150602081019050613487565b808801955050505b50505092915050565b600081546134c4816142ad565b6134ce81866140ca565b945060018216600081146134e957600181146134fa5761352d565b60ff1983168652818601935061352d565b6135038561408e565b60005b8381101561352557815481890152600182019150602081019050613506565b838801955050505b50505092915050565b6000613541826140ae565b61354b81856140d5565b935061355b81856020860161427a565b613564816144af565b840191505092915050565b600061357a826140ae565b61358481856140e6565b935061359481856020860161427a565b80840191505092915050565b60006135ad6047836140d5565b91506135b8826144cd565b606082019050919050565b60006135d06032836140d5565b91506135db82614542565b604082019050919050565b60006135f36026836140d5565b91506135fe82614591565b604082019050919050565b60006136166024836140d5565b9150613621826145e0565b604082019050919050565b60006136396019836140d5565b91506136448261462f565b602082019050919050565b600061365c602e836140d5565b915061366782614658565b604082019050919050565b600061367f601a836140d5565b915061368a826146a7565b602082019050919050565b60006136a26022836140d5565b91506136ad826146d0565b604082019050919050565b60006136c5602c836140d5565b91506136d08261471f565b604082019050919050565b60006136e86038836140d5565b91506136f38261476e565b604082019050919050565b600061370b602a836140d5565b9150613716826147bd565b604082019050919050565b600061372e6029836140d5565b91506137398261480c565b604082019050919050565b6000613751602b836140d5565b915061375c8261485b565b604082019050919050565b6000613774601e836140d5565b915061377f826148aa565b602082019050919050565b60006137976020836140d5565b91506137a2826148d3565b602082019050919050565b60006137ba602c836140d5565b91506137c5826148fc565b604082019050919050565b60006137dd6020836140d5565b91506137e88261494b565b602082019050919050565b60006138006034836140d5565b915061380b82614974565b604082019050919050565b60006138236029836140d5565b915061382e826149c3565b604082019050919050565b6000613846602f836140d5565b915061385182614a12565b604082019050919050565b60006138696021836140d5565b915061387482614a61565b604082019050919050565b600061388c6000836140ca565b915061389782614ab0565b600082019050919050565b60006138af6031836140d5565b91506138ba82614ab3565b604082019050919050565b60006138d26026836140d5565b91506138dd82614b02565b604082019050919050565b60006138f5601c836140d5565b915061390082614b51565b602082019050919050565b60006139186017836140d5565b915061392382614b7a565b602082019050919050565b61393781614212565b82525050565b61394e61394982614212565b614359565b82525050565b61395d81614240565b82525050565b61397461396f82614240565b61436b565b82525050565b6139838161424a565b82525050565b60006139968284866133a8565b91508190509392505050565b60006139ae8284613406565b915081905092915050565b60006139c582846134b7565b915081905092915050565b60006139dc828561356f565b91506139e8828461356f565b91508190509392505050565b60006139ff8261387f565b9150819050919050565b6000613a15828561393d565b600282019150613a258284613963565b6020820191508190509392505050565b6000602082019050613a4a600083018461334e565b92915050565b6000608082019050613a65600083018761334e565b613a72602083018661334e565b613a7f6040830185613954565b8181036060830152613a9181846133cd565b905095945050505050565b6000604082019050613ab1600083018561334e565b613abe6020830184613954565b9392505050565b6000602082019050613ada600083018461335d565b92915050565b60006020820190508181036000830152613afa81846133cd565b905092915050565b60006020820190508181036000830152613b1c8184613536565b905092915050565b60006020820190508181036000830152613b3d816135a0565b9050919050565b60006020820190508181036000830152613b5d816135c3565b9050919050565b60006020820190508181036000830152613b7d816135e6565b9050919050565b60006020820190508181036000830152613b9d81613609565b9050919050565b60006020820190508181036000830152613bbd8161362c565b9050919050565b60006020820190508181036000830152613bdd8161364f565b9050919050565b60006020820190508181036000830152613bfd81613672565b9050919050565b60006020820190508181036000830152613c1d81613695565b9050919050565b60006020820190508181036000830152613c3d816136b8565b9050919050565b60006020820190508181036000830152613c5d816136db565b9050919050565b60006020820190508181036000830152613c7d816136fe565b9050919050565b60006020820190508181036000830152613c9d81613721565b9050919050565b60006020820190508181036000830152613cbd81613744565b9050919050565b60006020820190508181036000830152613cdd81613767565b9050919050565b60006020820190508181036000830152613cfd8161378a565b9050919050565b60006020820190508181036000830152613d1d816137ad565b9050919050565b60006020820190508181036000830152613d3d816137d0565b9050919050565b60006020820190508181036000830152613d5d816137f3565b9050919050565b60006020820190508181036000830152613d7d81613816565b9050919050565b60006020820190508181036000830152613d9d81613839565b9050919050565b60006020820190508181036000830152613dbd8161385c565b9050919050565b60006020820190508181036000830152613ddd816138a2565b9050919050565b60006020820190508181036000830152613dfd816138c5565b9050919050565b60006020820190508181036000830152613e1d816138e8565b9050919050565b60006020820190508181036000830152613e3d8161390b565b9050919050565b600060a082019050613e59600083018861392e565b613e66602083018761334e565b8181036040830152613e7881866133cd565b9050613e87606083018561335d565b8181036080830152613e9981846133cd565b90509695505050505050565b6000608082019050613eba600083018861392e565b8181036020830152613ecc81876133cd565b9050613edb604083018661397a565b8181036060830152613eee81848661337b565b90509695505050505050565b6000608082019050613f0f600083018761392e565b8181036020830152613f2181866133cd565b9050613f30604083018561397a565b8181036060830152613f4281846133cd565b905095945050505050565b600060c082019050613f62600083018961392e565b8181036020830152613f748188613437565b90508181036040830152613f8881876133cd565b9050613f97606083018661333f565b613fa4608083018561334e565b81810360a0830152613fb681846133cd565b9050979650505050505050565b6000602082019050613fd86000830184613954565b92915050565b6000604082019050613ff36000830185613954565b614000602083018461336c565b9392505050565b6000614011614022565b905061401d82826142df565b919050565b6000604051905090565b600067ffffffffffffffff82111561404757614046614462565b5b614050826144af565b9050602081019050919050565b600067ffffffffffffffff82111561407857614077614462565b5b614081826144af565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006140fc82614240565b915061410783614240565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561413c5761413b6143a6565b5b828201905092915050565b600061415282614240565b915061415d83614240565b92508261416d5761416c6143d5565b5b828204905092915050565b600061418382614240565b915061418e83614240565b9250828210156141a1576141a06143a6565b5b828203905092915050565b60006141b782614220565b9050919050565b60006141c982614220565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561429857808201518184015260208101905061427d565b838111156142a7576000848401525b50505050565b600060028204905060018216806142c557607f821691505b602082108114156142d9576142d8614404565b5b50919050565b6142e8826144af565b810181811067ffffffffffffffff8211171561430757614306614462565b5b80604052505050565b600061431b82614240565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561434e5761434d6143a6565b5b600182019050919050565b6000614364826144c0565b9050919050565b6000819050919050565b600061438082614240565b915061438b83614240565b92508261439b5761439a6143d5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f47473a206d73672e76616c7565206e6f7420656e6f75676820746f20636f766560008201527f72206d6573736167654665652e2053656e642067617320666f72206d6573736160208201527f6765206665657300000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5468697320636861696e2069732063757272656e746c7920756e617661696c6160008201527f626c6520666f722074726176656c000000000000000000000000000000000000602082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f596f75206d757374206f776e2074686520746f6b656e20746f2074726176657260008201527f7365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f47473a204d61782032204e46547320706572207472616e73616374696f6e0000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b7f47473a204d696e74206578636565647320737570706c79000000000000000000600082015250565b614bac816141ac565b8114614bb757600080fd5b50565b614bc3816141be565b8114614bce57600080fd5b50565b614bda816141d0565b8114614be557600080fd5b50565b614bf1816141e6565b8114614bfc57600080fd5b50565b614c0881614212565b8114614c1357600080fd5b50565b614c1f81614240565b8114614c2a57600080fd5b50565b614c368161424a565b8114614c4157600080fd5b50565b614c4d8161425e565b8114614c5857600080fd5b5056fea2646970667358221220f4599bbc83c812c577085cf17b27128f9c32aa9ff0cd3bac2c86f5c0692103ed64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 574,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 887,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 889,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 893,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 897,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 901,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 907,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "endpoint",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILayerZeroEndpoint)816"
      },
      {
        "astId": 25,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage)))"
      },
      {
        "astId": 29,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 294,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 296,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 299,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 302,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "MAX_MINT_ETHEREUM",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 305,
        "contract": "contracts/TestNFT.sol:TestNFT",
        "label": "gasForDestinationLzReceive",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)816": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FailedMessages)16_storage)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)16_storage))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(FailedMessages)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NonblockingReceiver.FailedMessages)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedMessages)16_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FailedMessages)16_storage": {
        "encoding": "inplace",
        "label": "struct NonblockingReceiver.FailedMessages",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/TestNFT.sol:TestNFT",
            "label": "payloadLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15,
            "contract": "contracts/TestNFT.sol:TestNFT",
            "label": "payloadHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}