{
  "address": "0xE64E672a58881D746eF73858FBcc04D6f777001C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_revealUrl",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "senderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "messageFee",
          "type": "uint256"
        }
      ],
      "name": "InsufficientMessageFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        }
      ],
      "name": "MintExceedsSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "mintLimitPerTxn",
          "type": "uint256"
        }
      ],
      "name": "MintLimitPerTxn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddress",
          "type": "address"
        }
      ],
      "name": "OnlyTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "UnavailableChain",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payloadLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasForDestinationLzReceive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numTokens",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintLimitPerTxn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "setGasForDestinationLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_trustedRemote",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "traverseChains",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e8abcdf0fd5fe5f088f8afc6fcf796bf82931f2624ec180b00d385529da4481",
  "receipt": {
    "to": null,
    "from": "0x65A2175dbc2FC1621E47823788519f25a41E24bb",
    "contractAddress": "0xE64E672a58881D746eF73858FBcc04D6f777001C",
    "transactionIndex": 8,
    "gasUsed": "4715642",
    "logsBloom": "0x00000000000008000000000000000000000000000000000000800000004000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000800001000000000000040100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000002000000040000000004000000000000000000201000200000020000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x1cb6e441d29d06704c6668846cdda94fc52dbd4983cc7ad58241a760f9f788ea",
    "transactionHash": "0x8e8abcdf0fd5fe5f088f8afc6fcf796bf82931f2624ec180b00d385529da4481",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 26138543,
        "transactionHash": "0x8e8abcdf0fd5fe5f088f8afc6fcf796bf82931f2624ec180b00d385529da4481",
        "address": "0xE64E672a58881D746eF73858FBcc04D6f777001C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000065a2175dbc2fc1621e47823788519f25a41e24bb"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x1cb6e441d29d06704c6668846cdda94fc52dbd4983cc7ad58241a760f9f788ea"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 26138543,
        "transactionHash": "0x8e8abcdf0fd5fe5f088f8afc6fcf796bf82931f2624ec180b00d385529da4481",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000065a2175dbc2fc1621e47823788519f25a41e24bb",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000014f11073b6db7b600000000000000000000000000000000000000000000000005d48ebf228392910000000000000000000000000000000000000000000002d25fd15b7f7055a51100000000000000000000000000000000000000000000000004857db7e715dadb0000000000000000000000000000000000000000000002d261206c86abc35cc7",
        "logIndex": 119,
        "blockHash": "0x1cb6e441d29d06704c6668846cdda94fc52dbd4983cc7ad58241a760f9f788ea"
      }
    ],
    "blockNumber": 26138543,
    "cumulativeGasUsed": "7200651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmTRmsuXPdjb8hV6Rrh7a1Q1VKS1aUNsTeeKMRnyHbUbve/",
    "0xf69186dfBa60DdB133E91E9A4B5673624293d8F8",
    30,
    40,
    "ipfs://QmULL7LpdRoY5e7v2wPzpqJWPFXN3SeFhpwfJCE78VUgVY/hidden.json"
  ],
  "numDeployments": 1,
  "solcInputHash": "d8f0b96090d8cd84be86a4f8ce7f1ab1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_revealUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageFee\",\"type\":\"uint256\"}],\"name\":\"InsufficientMessageFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"}],\"name\":\"MintExceedsSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mintLimitPerTxn\",\"type\":\"uint256\"}],\"name\":\"MintLimitPerTxn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OnlyTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"UnavailableChain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForDestinationLzReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numTokens\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimitPerTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setGasForDestinationLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_trustedRemote\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"traverseChains\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmniTestNFT.sol\":\"OmniTestNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NonblockingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\\n    ILayerZeroEndpoint internal endpoint;\\n\\n    struct FailedMessages {\\n        uint256 payloadLength;\\n        bytes32 payloadHash;\\n    }\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))\\n        public failedMessages;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event MessageFailed(\\n        uint16 _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _payload\\n    );\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\\n        require(\\n            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\\n                keccak256(_srcAddress) ==\\n                keccak256(trustedRemoteLookup[_srcChainId]),\\n            \\\"NonblockingReceiver: invalid source sending contract\\\"\\n        );\\n\\n        // try-catch all errors/exceptions\\n        // having failed messages does not block messages passing\\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(\\n                _payload.length,\\n                keccak256(_payload)\\n            );\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function onLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public {\\n        // only internal transaction\\n        require(\\n            msg.sender == address(this),\\n            \\\"NonblockingReceiver: caller must be Bridge.\\\"\\n        );\\n\\n        // handle incoming message\\n        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _txParam\\n    ) internal {\\n        endpoint.send{value: msg.value}(\\n            _dstChainId,\\n            trustedRemoteLookup[_dstChainId],\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _txParam\\n        );\\n    }\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external payable {\\n        // assert there is message to retry\\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][\\n            _srcAddress\\n        ][_nonce];\\n        require(\\n            failedMsg.payloadHash != bytes32(0),\\n            \\\"NonblockingReceiver: no stored message\\\"\\n        );\\n        require(\\n            _payload.length == failedMsg.payloadLength &&\\n                keccak256(_payload) == failedMsg.payloadHash,\\n            \\\"LayerZero: invalid payload\\\"\\n        );\\n        // clear the stored message\\n        failedMsg.payloadLength = 0;\\n        failedMsg.payloadHash = bytes32(0);\\n        // execute the message. revert if it fails again\\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)\\n        external\\n        onlyOwner\\n    {\\n        trustedRemoteLookup[_chainId] = _trustedRemote;\\n    }\\n}\\n\",\"keccak256\":\"0x739b953ff16901a93745fcc13fcbb962065c6cd9d93805c5e5f9815140e24d03\",\"license\":\"GPL-3.0\"},\"contracts/OmniTestNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"./NonblockingReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract OmniTestNFT is Ownable, ERC721, NonblockingReceiver {\\n    address public _owner;\\n    string private baseURI;\\n    uint256 public nextTokenId;\\n    uint256 public immutable maxMint;\\n    uint256 public mintLimitPerTxn = 2;\\n\\n    uint256 public gasForDestinationLzReceive = 350000;\\n\\n    bool private revealed = false;\\n    string private revealUrl;\\n\\n    constructor(\\n        string memory _baseUri,\\n        address _lzEndpoint,\\n        uint256 _nextTokenId,\\n        uint256 _maxMint,\\n        string memory _revealUrl\\n    ) ERC721(\\\"OmniTestNFT\\\", \\\"OTNFT\\\") {\\n        _owner = msg.sender;\\n        endpoint = ILayerZeroEndpoint(_lzEndpoint);\\n        baseURI = _baseUri;\\n        nextTokenId = _nextTokenId;\\n        maxMint = _maxMint;\\n        revealUrl = _revealUrl;\\n    }\\n\\n    error MintExceedsSupply(\\n        uint8 numTokens,\\n        uint256 currentTokenId,\\n        uint256 maxMint\\n    );\\n    error MintLimitPerTxn(uint8 numTokens, uint256 mintLimitPerTxn);\\n    error OnlyTokenOwner(address callerAddress);\\n    error UnavailableChain(uint16 chainId);\\n    error InsufficientMessageFee(uint256 senderAmount, uint256 messageFee);\\n\\n    modifier onlyTokenOwner(uint256 tokenId) {\\n        if (msg.sender != ownerOf(tokenId)) {\\n            revert OnlyTokenOwner({callerAddress: msg.sender});\\n        }\\n        _;\\n    }\\n\\n    // mint function\\n    // you can choose to mint 1 or 2\\n    // mint is free, but payments are accepted\\n    function mint(uint8 numTokens) external payable {\\n        if (numTokens > mintLimitPerTxn) {\\n            revert MintLimitPerTxn({\\n                numTokens: numTokens,\\n                mintLimitPerTxn: mintLimitPerTxn\\n            });\\n        }\\n        if (nextTokenId + numTokens >= maxMint) {\\n            revert MintExceedsSupply({\\n                numTokens: numTokens,\\n                currentTokenId: nextTokenId,\\n                maxMint: maxMint\\n            });\\n        }\\n\\n        for (uint256 i; i < numTokens; i++) {\\n            _safeMint(msg.sender, ++nextTokenId);\\n        }\\n    }\\n\\n    // This function transfers the nft from your address on the\\n    // source chain to the same address on the destination chain\\n    function traverseChains(uint16 _chainId, uint256 tokenId)\\n        public\\n        payable\\n        onlyTokenOwner(tokenId)\\n    {\\n        if (trustedRemoteLookup[_chainId].length == 0) {\\n            revert UnavailableChain({chainId: _chainId});\\n        }\\n\\n        // burn NFT, eliminating it from circulation on src chain\\n        _burn(tokenId);\\n\\n        // abi.encode() the payload with the values to send\\n        bytes memory payload = abi.encode(msg.sender, tokenId);\\n\\n        // encode adapterParams to specify more gas for the destination\\n        uint16 version = 1;\\n        bytes memory adapterParams = abi.encodePacked(\\n            version,\\n            gasForDestinationLzReceive\\n        );\\n\\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\\n        // you will be refunded for extra gas paid\\n        (uint256 messageFee, ) = endpoint.estimateFees(\\n            _chainId,\\n            address(this),\\n            payload,\\n            false,\\n            adapterParams\\n        );\\n\\n        if (msg.value <= messageFee) {\\n            revert InsufficientMessageFee({\\n                senderAmount: msg.value,\\n                messageFee: messageFee\\n            });\\n        }\\n\\n        endpoint.send{value: msg.value}(\\n            _chainId, // destination chainId\\n            trustedRemoteLookup[_chainId], // destination address of nft contract\\n            payload, // abi.encoded()'ed bytes\\n            payable(msg.sender), // refund address\\n            address(0x0), // 'zroPaymentAddress' unused for this\\n            adapterParams // txParameters\\n        );\\n    }\\n\\n    function setBaseURI(string calldata _uri) external onlyOwner {\\n        baseURI = _uri;\\n    }\\n\\n    function donate() external payable {\\n        // thank you\\n    }\\n\\n    // This allows the devs to receive kind donations\\n    function withdraw(uint256 amt) external onlyOwner {\\n        (bool sent, ) = payable(_owner).call{value: amt}(\\\"\\\");\\n        require(sent, \\\"GG: Failed to withdraw Ether\\\");\\n    }\\n\\n    // just in case this fixed variable limits us from future integrations\\n    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {\\n        gasForDestinationLzReceive = newVal;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (revealed == true) {\\n            return super.tokenURI(tokenId);\\n        }\\n\\n        return revealUrl;\\n    }\\n\\n    function revealCollection() public onlyOwner {\\n        revealed = true;\\n    }\\n\\n    function _LzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal override {\\n        // decode\\n        (address toAddr, uint256 tokenId) = abi.decode(\\n            _payload,\\n            (address, uint256)\\n        );\\n\\n        // mint the tokens back into existence on destination chain\\n        _safeMint(toAddr, tokenId);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x00cef251fbe8b4b674031b65c033600797fbcbe6562be5582274e14512ed9139\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x6ea0979972ee57a7546b84089b4f61ee8ef4343b4dfc08559afc13de48bace67\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\",\"keccak256\":\"0xe7dcec92e7e0f29ac06e048b93c9ea62a6c40bbeb1a8e0310a9b05c9785cd595\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0x79c54bf0c6d07d20ed02f1734a0e512f896f98d80d4a7bed23ac6c716f421cde\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526002600d5562055730600e556000600f60006101000a81548160ff0219169083151502179055503480156200003857600080fd5b50604051620055043803806200550483398181016040528101906200005e919062000414565b6040518060400160405280600b81526020017f4f6d6e69546573744e46540000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4f544e4654000000000000000000000000000000000000000000000000000000815250620000ea620000de620001ec60201b60201c565b620001f460201b60201c565b816001908051906020019062000102929190620002b8565b5080600290805190602001906200011b929190620002b8565b50505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b9080519060200190620001b8929190620002b8565b5082600c8190555081608081815250508060109080519060200190620001e0929190620002b8565b505050505050620006d0565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002c690620005ad565b90600052602060002090601f016020900481019282620002ea576000855562000336565b82601f106200030557805160ff191683800117855562000336565b8280016001018555821562000336579182015b828111156200033557825182559160200191906001019062000318565b5b50905062000345919062000349565b5090565b5b80821115620003645760008160009055506001016200034a565b5090565b60006200037f620003798462000503565b620004da565b9050828152602081018484840111156200039e576200039d6200067c565b5b620003ab84828562000577565b509392505050565b600081519050620003c4816200069c565b92915050565b600082601f830112620003e257620003e162000677565b5b8151620003f484826020860162000368565b91505092915050565b6000815190506200040e81620006b6565b92915050565b600080600080600060a0868803121562000433576200043262000686565b5b600086015167ffffffffffffffff81111562000454576200045362000681565b5b6200046288828901620003ca565b95505060206200047588828901620003b3565b94505060406200048888828901620003fd565b93505060606200049b88828901620003fd565b925050608086015167ffffffffffffffff811115620004bf57620004be62000681565b5b620004cd88828901620003ca565b9150509295509295909350565b6000620004e6620004f9565b9050620004f48282620005e3565b919050565b6000604051905090565b600067ffffffffffffffff82111562000521576200052062000648565b5b6200052c826200068b565b9050602081019050919050565b600062000546826200054d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005975780820151818401526020810190506200057a565b83811115620005a7576000848401525b50505050565b60006002820490506001821680620005c657607f821691505b60208210811415620005dd57620005dc62000619565b5b50919050565b620005ee826200068b565b810181811067ffffffffffffffff8211171562000610576200060f62000648565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620006a78162000539565b8114620006b357600080fd5b50565b620006c1816200056d565b8114620006cd57600080fd5b50565b608051614e0a620006fa60003960008181611184015281816111bf01526113a10152614e0a6000f3fe6080604052600436106101f85760003560e01c806375794a3c1161010d578063b88d4fde116100a0578063e985e9c51161006f578063e985e9c5146106f2578063eb8d72b71461072f578063ed88c68e14610758578063f2fde38b14610762578063f3234f401461078b576101f8565b8063b88d4fde14610654578063c87b56dd1461067d578063cf89fa03146106ba578063d1deba1f146106d6576101f8565b806395d89b41116100dc57806395d89b41146105aa57806395f4eda7146105d5578063a22cb46514610600578063b2bdfa7b14610629576101f8565b806375794a3c146104ed5780638da5cb5b146105185780638ee7491214610543578063943fb87214610581576101f8565b806340d0b4a9116101905780636ecd23061161015f5780636ecd23061461041557806370a0823114610431578063715018a61461046e5780637501f741146104855780637533d788146104b0576101f8565b806340d0b4a91461036f57806342842e0e1461038657806355f804b3146103af5780636352211e146103d8576101f8565b8063095ea7b3116101cc578063095ea7b3146102cb5780631c37a822146102f457806323b872dd1461031d5780632e1a7d4d14610346576101f8565b80621d3567146101fd57806301ffc9a71461022657806306fdde0314610263578063081812fc1461028e575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190613505565b6107b6565b005b34801561023257600080fd5b5061024d600480360381019061024891906132be565b6109f8565b60405161025a9190613d87565b60405180910390f35b34801561026f57600080fd5b50610278610ada565b6040516102859190613dc4565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906135e4565b610b6c565b6040516102c29190613cf7565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061327e565b610bf1565b005b34801561030057600080fd5b5061031b60048036038101906103169190613505565b610d09565b005b34801561032957600080fd5b50610344600480360381019061033f9190613168565b610d89565b005b34801561035257600080fd5b5061036d600480360381019061036891906135e4565b610de9565b005b34801561037b57600080fd5b50610384610f37565b005b34801561039257600080fd5b506103ad60048036038101906103a89190613168565b610fd0565b005b3480156103bb57600080fd5b506103d660048036038101906103d19190613318565b610ff0565b005b3480156103e457600080fd5b506103ff60048036038101906103fa91906135e4565b611082565b60405161040c9190613cf7565b60405180910390f35b61042f600480360381019061042a9190613651565b611134565b005b34801561043d57600080fd5b50610458600480360381019061045391906130bb565b61125f565b6040516104659190614220565b60405180910390f35b34801561047a57600080fd5b50610483611317565b005b34801561049157600080fd5b5061049a61139f565b6040516104a79190614220565b60405180910390f35b3480156104bc57600080fd5b506104d760048036038101906104d29190613365565b6113c3565b6040516104e49190613da2565b60405180910390f35b3480156104f957600080fd5b50610502611463565b60405161050f9190614220565b60405180910390f35b34801561052457600080fd5b5061052d611469565b60405161053a9190613cf7565b60405180910390f35b34801561054f57600080fd5b5061056a600480360381019061056591906133f2565b611492565b60405161057892919061423b565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a391906135e4565b6114e6565b005b3480156105b657600080fd5b506105bf61156c565b6040516105cc9190613dc4565b60405180910390f35b3480156105e157600080fd5b506105ea6115fe565b6040516105f79190614220565b60405180910390f35b34801561060c57600080fd5b506106276004803603810190610622919061323e565b611604565b005b34801561063557600080fd5b5061063e61161a565b60405161064b9190613cf7565b60405180910390f35b34801561066057600080fd5b5061067b600480360381019061067691906131bb565b611640565b005b34801561068957600080fd5b506106a4600480360381019061069f91906135e4565b6116a2565b6040516106b19190613dc4565b60405180910390f35b6106d460048036038101906106cf91906135a4565b611763565b005b6106f060048036038101906106eb9190613461565b611a60565b005b3480156106fe57600080fd5b5061071960048036038101906107149190613128565b611c00565b6040516107269190613d87565b60405180910390f35b34801561073b57600080fd5b5061075660048036038101906107519190613392565b611c94565b005b610760611d40565b005b34801561076e57600080fd5b50610789600480360381019061078491906130bb565b611d42565b005b34801561079757600080fd5b506107a0611e3a565b6040516107ad9190614220565b60405180910390f35b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081057600080fd5b600960008561ffff1661ffff168152602001908152602001600020805461083690614562565b9050835114801561087c5750600960008561ffff1661ffff16815260200190815260200160002060405161086a9190613c7b565b60405180910390208380519060200120145b6108bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b290613fc6565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b81526004016108fa9493929190614157565b600060405180830381600087803b15801561091457600080fd5b505af1925050508015610925575060015b6109f1576040518060400160405280825181526020018280519060200120815250600860008661ffff1661ffff1681526020019081526020016000208460405161096f9190613c64565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d848484846040516109e49493929190614157565b60405180910390a16109f2565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ac357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610ad35750610ad282611e40565b5b9050919050565b606060018054610ae990614562565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1590614562565b8015610b625780601f10610b3757610100808354040283529160200191610b62565b820191906000526020600020905b815481529060010190602001808311610b4557829003601f168201915b5050505050905090565b6000610b7782611eaa565b610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90613f86565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610bfc82611082565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6490614006565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c8c611f16565b73ffffffffffffffffffffffffffffffffffffffff161480610cbb5750610cba81610cb5611f16565b611c00565b5b610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613ee6565b60405180910390fd5b610d048383611f1e565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6e90613f46565b60405180910390fd5b610d8384848484611fd7565b50505050565b610d9a610d94611f16565b82612004565b610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd090614026565b60405180910390fd5b610de48383836120e2565b505050565b610df1611f16565b73ffffffffffffffffffffffffffffffffffffffff16610e0f611469565b73ffffffffffffffffffffffffffffffffffffffff1614610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c90613fa6565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ead90613cb6565b60006040518083038185875af1925050503d8060008114610eea576040519150601f19603f3d011682016040523d82523d6000602084013e610eef565b606091505b5050905080610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90614066565b60405180910390fd5b5050565b610f3f611f16565b73ffffffffffffffffffffffffffffffffffffffff16610f5d611469565b73ffffffffffffffffffffffffffffffffffffffff1614610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90613fa6565b60405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b610feb83838360405180602001604052806000815250611640565b505050565b610ff8611f16565b73ffffffffffffffffffffffffffffffffffffffff16611016611469565b73ffffffffffffffffffffffffffffffffffffffff161461106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106390613fa6565b60405180910390fd5b8181600b919061107d929190612da4565b505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561112b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112290613f26565b60405180910390fd5b80915050919050565b600d548160ff1611156111825780600d546040517fceff16fc00000000000000000000000000000000000000000000000000000000815260040161117992919061428d565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160ff16600c546111b491906143a6565b1061121c5780600c547f00000000000000000000000000000000000000000000000000000000000000006040517f72ee72a5000000000000000000000000000000000000000000000000000000008152600401611213939291906142b6565b60405180910390fd5b60005b8160ff1681101561125b5761124833600c6000815461123d906145c5565b919050819055612349565b8080611253906145c5565b91505061121f565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c790613f06565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61131f611f16565b73ffffffffffffffffffffffffffffffffffffffff1661133d611469565b73ffffffffffffffffffffffffffffffffffffffff1614611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a90613fa6565b60405180910390fd5b61139d6000612367565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600960205280600052604060002060009150905080546113e290614562565b80601f016020809104026020016040519081016040528092919081815260200182805461140e90614562565b801561145b5780601f106114305761010080835404028352916020019161145b565b820191906000526020600020905b81548152906001019060200180831161143e57829003601f168201915b505050505081565b600c5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b6114ee611f16565b73ffffffffffffffffffffffffffffffffffffffff1661150c611469565b73ffffffffffffffffffffffffffffffffffffffff1614611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990613fa6565b60405180910390fd5b80600e8190555050565b60606002805461157b90614562565b80601f01602080910402602001604051908101604052809291908181526020018280546115a790614562565b80156115f45780601f106115c9576101008083540402835291602001916115f4565b820191906000526020600020905b8154815290600101906020018083116115d757829003601f168201915b5050505050905090565b600d5481565b61161661160f611f16565b838361242b565b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61165161164b611f16565b83612004565b611690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168790614026565b60405180910390fd5b61169c84848484612598565b50505050565b606060011515600f60009054906101000a900460ff16151514156116d0576116c9826125f4565b905061175e565b601080546116dd90614562565b80601f016020809104026020016040519081016040528092919081815260200182805461170990614562565b80156117565780601f1061172b57610100808354040283529160200191611756565b820191906000526020600020905b81548152906001019060200180831161173957829003601f168201915b505050505090505b919050565b8061176d81611082565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117dc57336040517fef1d23930000000000000000000000000000000000000000000000000000000081526004016117d39190613cf7565b60405180910390fd5b6000600960008561ffff1661ffff168152602001908152602001600020805461180490614562565b9050141561184957826040517f12263be10000000000000000000000000000000000000000000000000000000081526004016118409190614086565b60405180910390fd5b6118528261269b565b60003383604051602001611867929190613d5e565b6040516020818303038152906040529050600060019050600081600e54604051602001611895929190613ccb565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108830876000876040518663ffffffff1660e01b815260040161190c9594939291906140a1565b604080518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190613611565b5090508034116119a45734816040517f955eeb6900000000000000000000000000000000000000000000000000000000815260040161199b929190614264565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003489600960008c61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b8152600401611a25969594939291906141aa565b6000604051808303818588803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050505050505050505050565b6000600860008761ffff1661ffff16815260200190815260200160002085604051611a8b9190613c64565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b81600101541415611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af790614046565b60405180910390fd5b806000015483839050148015611b30575080600101548383604051611b26929190613c4b565b6040518091039020145b611b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6690613ea6565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b8152600401611bc6959493929190614102565b600060405180830381600087803b158015611be057600080fd5b505af1158015611bf4573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c9c611f16565b73ffffffffffffffffffffffffffffffffffffffff16611cba611469565b73ffffffffffffffffffffffffffffffffffffffff1614611d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0790613fa6565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190611d3a929190612e2a565b50505050565b565b611d4a611f16565b73ffffffffffffffffffffffffffffffffffffffff16611d68611469565b73ffffffffffffffffffffffffffffffffffffffff1614611dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db590613fa6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2590613e06565b60405180910390fd5b611e3781612367565b50565b600e5481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f9183611082565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611fee91906130e8565b91509150611ffc8282612349565b505050505050565b600061200f82611eaa565b61204e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204590613ec6565b60405180910390fd5b600061205983611082565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061209b575061209a8185611c00565b5b806120d957508373ffffffffffffffffffffffffffffffffffffffff166120c184610b6c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210282611082565b73ffffffffffffffffffffffffffffffffffffffff1614612158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214f90613e26565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bf90613e66565b60405180910390fd5b6121d38383836127b8565b6121de600082611f1e565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461222e919061442d565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228591906143a6565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123448383836127bd565b505050565b6123638282604051806020016040528060008152506127c2565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190613e86565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161258b9190613d87565b60405180910390a3505050565b6125a38484846120e2565b6125af8484848461281d565b6125ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e590613de6565b60405180910390fd5b50505050565b60606125ff82611eaa565b61263e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263590613fe6565b60405180910390fd5b60006126486129b4565b905060008151116126685760405180602001604052806000815250612693565b8061267284612a46565b604051602001612683929190613c92565b6040516020818303038152906040525b915050919050565b60006126a682611082565b90506126b4816000846127b8565b6126bf600083611f1e565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270f919061442d565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127b4816000846127bd565b5050565b505050565b505050565b6127cc8383612ba7565b6127d9600084848461281d565b612818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280f90613de6565b60405180910390fd5b505050565b600061283e8473ffffffffffffffffffffffffffffffffffffffff16612d81565b156129a7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612867611f16565b8786866040518563ffffffff1660e01b81526004016128899493929190613d12565b602060405180830381600087803b1580156128a357600080fd5b505af19250505080156128d457506040513d601f19601f820116820180604052508101906128d191906132eb565b60015b612957573d8060008114612904576040519150601f19603f3d011682016040523d82523d6000602084013e612909565b606091505b5060008151141561294f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294690613de6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129ac565b600190505b949350505050565b6060600b80546129c390614562565b80601f01602080910402602001604051908101604052809291908181526020018280546129ef90614562565b8015612a3c5780601f10612a1157610100808354040283529160200191612a3c565b820191906000526020600020905b815481529060010190602001808311612a1f57829003601f168201915b5050505050905090565b60606000821415612a8e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ba2565b600082905060005b60008214612ac0578080612aa9906145c5565b915050600a82612ab991906143fc565b9150612a96565b60008167ffffffffffffffff811115612adc57612adb614717565b5b6040519080825280601f01601f191660200182016040528015612b0e5781602001600182028036833780820191505090505b5090505b60008514612b9b57600182612b27919061442d565b9150600a85612b36919061462a565b6030612b4291906143a6565b60f81b818381518110612b5857612b576146e8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b9491906143fc565b9450612b12565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0e90613f66565b60405180910390fd5b612c2081611eaa565b15612c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5790613e46565b60405180910390fd5b612c6c600083836127b8565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cbc91906143a6565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d7d600083836127bd565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612db090614562565b90600052602060002090601f016020900481019282612dd25760008555612e19565b82601f10612deb57803560ff1916838001178555612e19565b82800160010185558215612e19579182015b82811115612e18578235825591602001919060010190612dfd565b5b509050612e269190612eb0565b5090565b828054612e3690614562565b90600052602060002090601f016020900481019282612e585760008555612e9f565b82601f10612e7157803560ff1916838001178555612e9f565b82800160010185558215612e9f579182015b82811115612e9e578235825591602001919060010190612e83565b5b509050612eac9190612eb0565b5090565b5b80821115612ec9576000816000905550600101612eb1565b5090565b6000612ee0612edb84614312565b6142ed565b905082815260208101848484011115612efc57612efb614755565b5b612f07848285614520565b509392505050565b600081359050612f1e81614d1c565b92915050565b600081519050612f3381614d33565b92915050565b600081359050612f4881614d4a565b92915050565b600081359050612f5d81614d61565b92915050565b600081519050612f7281614d61565b92915050565b60008083601f840112612f8e57612f8d61474b565b5b8235905067ffffffffffffffff811115612fab57612faa614746565b5b602083019150836001820283011115612fc757612fc6614750565b5b9250929050565b600082601f830112612fe357612fe261474b565b5b8135612ff3848260208601612ecd565b91505092915050565b60008083601f8401126130125761301161474b565b5b8235905067ffffffffffffffff81111561302f5761302e614746565b5b60208301915083600182028301111561304b5761304a614750565b5b9250929050565b60008135905061306181614d78565b92915050565b60008135905061307681614d8f565b92915050565b60008151905061308b81614d8f565b92915050565b6000813590506130a081614da6565b92915050565b6000813590506130b581614dbd565b92915050565b6000602082840312156130d1576130d061475f565b5b60006130df84828501612f0f565b91505092915050565b600080604083850312156130ff576130fe61475f565b5b600061310d85828601612f24565b925050602061311e8582860161307c565b9150509250929050565b6000806040838503121561313f5761313e61475f565b5b600061314d85828601612f0f565b925050602061315e85828601612f0f565b9150509250929050565b6000806000606084860312156131815761318061475f565b5b600061318f86828701612f0f565b93505060206131a086828701612f0f565b92505060406131b186828701613067565b9150509250925092565b600080600080608085870312156131d5576131d461475f565b5b60006131e387828801612f0f565b94505060206131f487828801612f0f565b935050604061320587828801613067565b925050606085013567ffffffffffffffff8111156132265761322561475a565b5b61323287828801612fce565b91505092959194509250565b600080604083850312156132555761325461475f565b5b600061326385828601612f0f565b925050602061327485828601612f39565b9150509250929050565b600080604083850312156132955761329461475f565b5b60006132a385828601612f0f565b92505060206132b485828601613067565b9150509250929050565b6000602082840312156132d4576132d361475f565b5b60006132e284828501612f4e565b91505092915050565b6000602082840312156133015761330061475f565b5b600061330f84828501612f63565b91505092915050565b6000806020838503121561332f5761332e61475f565b5b600083013567ffffffffffffffff81111561334d5761334c61475a565b5b61335985828601612ffc565b92509250509250929050565b60006020828403121561337b5761337a61475f565b5b600061338984828501613052565b91505092915050565b6000806000604084860312156133ab576133aa61475f565b5b60006133b986828701613052565b935050602084013567ffffffffffffffff8111156133da576133d961475a565b5b6133e686828701612f78565b92509250509250925092565b60008060006060848603121561340b5761340a61475f565b5b600061341986828701613052565b935050602084013567ffffffffffffffff81111561343a5761343961475a565b5b61344686828701612fce565b925050604061345786828701613067565b9150509250925092565b60008060008060006080868803121561347d5761347c61475f565b5b600061348b88828901613052565b955050602086013567ffffffffffffffff8111156134ac576134ab61475a565b5b6134b888828901612fce565b94505060406134c988828901613091565b935050606086013567ffffffffffffffff8111156134ea576134e961475a565b5b6134f688828901612f78565b92509250509295509295909350565b6000806000806080858703121561351f5761351e61475f565b5b600061352d87828801613052565b945050602085013567ffffffffffffffff81111561354e5761354d61475a565b5b61355a87828801612fce565b935050604061356b87828801613091565b925050606085013567ffffffffffffffff81111561358c5761358b61475a565b5b61359887828801612fce565b91505092959194509250565b600080604083850312156135bb576135ba61475f565b5b60006135c985828601613052565b92505060206135da85828601613067565b9150509250929050565b6000602082840312156135fa576135f961475f565b5b600061360884828501613067565b91505092915050565b600080604083850312156136285761362761475f565b5b60006136368582860161307c565b92505060206136478582860161307c565b9150509250929050565b6000602082840312156136675761366661475f565b5b6000613675848285016130a6565b91505092915050565b61368781614473565b82525050565b61369681614461565b82525050565b6136a581614485565b82525050565b6136b481614491565b82525050565b60006136c6838561436e565b93506136d3838584614520565b6136dc83614764565b840190509392505050565b60006136f3838561437f565b9350613700838584614520565b82840190509392505050565b600061371782614358565b613721818561436e565b935061373181856020860161452f565b61373a81614764565b840191505092915050565b600061375082614358565b61375a818561437f565b935061376a81856020860161452f565b80840191505092915050565b6000815461378381614562565b61378d818661436e565b945060018216600081146137a857600181146137ba576137ed565b60ff19831686526020860193506137ed565b6137c385614343565b60005b838110156137e5578154818901526001820191506020810190506137c6565b808801955050505b50505092915050565b6000815461380381614562565b61380d818661437f565b9450600182166000811461382857600181146138395761386c565b60ff1983168652818601935061386c565b61384285614343565b60005b8381101561386457815481890152600182019150602081019050613845565b838801955050505b50505092915050565b600061388082614363565b61388a818561438a565b935061389a81856020860161452f565b6138a381614764565b840191505092915050565b60006138b982614363565b6138c3818561439b565b93506138d381856020860161452f565b80840191505092915050565b60006138ec60328361438a565b91506138f782614782565b604082019050919050565b600061390f60268361438a565b915061391a826147d1565b604082019050919050565b600061393260258361438a565b915061393d82614820565b604082019050919050565b6000613955601c8361438a565b91506139608261486f565b602082019050919050565b600061397860248361438a565b915061398382614898565b604082019050919050565b600061399b60198361438a565b91506139a6826148e7565b602082019050919050565b60006139be601a8361438a565b91506139c982614910565b602082019050919050565b60006139e1602c8361438a565b91506139ec82614939565b604082019050919050565b6000613a0460388361438a565b9150613a0f82614988565b604082019050919050565b6000613a27602a8361438a565b9150613a32826149d7565b604082019050919050565b6000613a4a60298361438a565b9150613a5582614a26565b604082019050919050565b6000613a6d602b8361438a565b9150613a7882614a75565b604082019050919050565b6000613a9060208361438a565b9150613a9b82614ac4565b602082019050919050565b6000613ab3602c8361438a565b9150613abe82614aed565b604082019050919050565b6000613ad660208361438a565b9150613ae182614b3c565b602082019050919050565b6000613af960348361438a565b9150613b0482614b65565b604082019050919050565b6000613b1c602f8361438a565b9150613b2782614bb4565b604082019050919050565b6000613b3f60218361438a565b9150613b4a82614c03565b604082019050919050565b6000613b6260008361437f565b9150613b6d82614c52565b600082019050919050565b6000613b8560318361438a565b9150613b9082614c55565b604082019050919050565b6000613ba860268361438a565b9150613bb382614ca4565b604082019050919050565b6000613bcb601c8361438a565b9150613bd682614cf3565b602082019050919050565b613bea816144c7565b82525050565b613c01613bfc826144c7565b61460e565b82525050565b613c10816144f5565b82525050565b613c27613c22826144f5565b614620565b82525050565b613c36816144ff565b82525050565b613c4581614513565b82525050565b6000613c588284866136e7565b91508190509392505050565b6000613c708284613745565b915081905092915050565b6000613c8782846137f6565b915081905092915050565b6000613c9e82856138ae565b9150613caa82846138ae565b91508190509392505050565b6000613cc182613b55565b9150819050919050565b6000613cd78285613bf0565b600282019150613ce78284613c16565b6020820191508190509392505050565b6000602082019050613d0c600083018461368d565b92915050565b6000608082019050613d27600083018761368d565b613d34602083018661368d565b613d416040830185613c07565b8181036060830152613d53818461370c565b905095945050505050565b6000604082019050613d73600083018561368d565b613d806020830184613c07565b9392505050565b6000602082019050613d9c600083018461369c565b92915050565b60006020820190508181036000830152613dbc818461370c565b905092915050565b60006020820190508181036000830152613dde8184613875565b905092915050565b60006020820190508181036000830152613dff816138df565b9050919050565b60006020820190508181036000830152613e1f81613902565b9050919050565b60006020820190508181036000830152613e3f81613925565b9050919050565b60006020820190508181036000830152613e5f81613948565b9050919050565b60006020820190508181036000830152613e7f8161396b565b9050919050565b60006020820190508181036000830152613e9f8161398e565b9050919050565b60006020820190508181036000830152613ebf816139b1565b9050919050565b60006020820190508181036000830152613edf816139d4565b9050919050565b60006020820190508181036000830152613eff816139f7565b9050919050565b60006020820190508181036000830152613f1f81613a1a565b9050919050565b60006020820190508181036000830152613f3f81613a3d565b9050919050565b60006020820190508181036000830152613f5f81613a60565b9050919050565b60006020820190508181036000830152613f7f81613a83565b9050919050565b60006020820190508181036000830152613f9f81613aa6565b9050919050565b60006020820190508181036000830152613fbf81613ac9565b9050919050565b60006020820190508181036000830152613fdf81613aec565b9050919050565b60006020820190508181036000830152613fff81613b0f565b9050919050565b6000602082019050818103600083015261401f81613b32565b9050919050565b6000602082019050818103600083015261403f81613b78565b9050919050565b6000602082019050818103600083015261405f81613b9b565b9050919050565b6000602082019050818103600083015261407f81613bbe565b9050919050565b600060208201905061409b6000830184613be1565b92915050565b600060a0820190506140b66000830188613be1565b6140c3602083018761368d565b81810360408301526140d5818661370c565b90506140e4606083018561369c565b81810360808301526140f6818461370c565b90509695505050505050565b60006080820190506141176000830188613be1565b8181036020830152614129818761370c565b90506141386040830186613c2d565b818103606083015261414b8184866136ba565b90509695505050505050565b600060808201905061416c6000830187613be1565b818103602083015261417e818661370c565b905061418d6040830185613c2d565b818103606083015261419f818461370c565b905095945050505050565b600060c0820190506141bf6000830189613be1565b81810360208301526141d18188613776565b905081810360408301526141e5818761370c565b90506141f4606083018661367e565b614201608083018561368d565b81810360a0830152614213818461370c565b9050979650505050505050565b60006020820190506142356000830184613c07565b92915050565b60006040820190506142506000830185613c07565b61425d60208301846136ab565b9392505050565b60006040820190506142796000830185613c07565b6142866020830184613c07565b9392505050565b60006040820190506142a26000830185613c3c565b6142af6020830184613c07565b9392505050565b60006060820190506142cb6000830186613c3c565b6142d86020830185613c07565b6142e56040830184613c07565b949350505050565b60006142f7614308565b90506143038282614594565b919050565b6000604051905090565b600067ffffffffffffffff82111561432d5761432c614717565b5b61433682614764565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006143b1826144f5565b91506143bc836144f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143f1576143f061465b565b5b828201905092915050565b6000614407826144f5565b9150614412836144f5565b9250826144225761442161468a565b5b828204905092915050565b6000614438826144f5565b9150614443836144f5565b9250828210156144565761445561465b565b5b828203905092915050565b600061446c826144d5565b9050919050565b600061447e826144d5565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561454d578082015181840152602081019050614532565b8381111561455c576000848401525b50505050565b6000600282049050600182168061457a57607f821691505b6020821081141561458e5761458d6146b9565b5b50919050565b61459d82614764565b810181811067ffffffffffffffff821117156145bc576145bb614717565b5b80604052505050565b60006145d0826144f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156146035761460261465b565b5b600182019050919050565b600061461982614775565b9050919050565b6000819050919050565b6000614635826144f5565b9150614640836144f5565b9250826146505761464f61468a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b614d2581614461565b8114614d3057600080fd5b50565b614d3c81614473565b8114614d4757600080fd5b50565b614d5381614485565b8114614d5e57600080fd5b50565b614d6a8161449b565b8114614d7557600080fd5b50565b614d81816144c7565b8114614d8c57600080fd5b50565b614d98816144f5565b8114614da357600080fd5b50565b614daf816144ff565b8114614dba57600080fd5b50565b614dc681614513565b8114614dd157600080fd5b5056fea26469706673582212209f93d1b1d260112dfb63ff172be14c69fd239f563f034667538e86f396dcd35364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c806375794a3c1161010d578063b88d4fde116100a0578063e985e9c51161006f578063e985e9c5146106f2578063eb8d72b71461072f578063ed88c68e14610758578063f2fde38b14610762578063f3234f401461078b576101f8565b8063b88d4fde14610654578063c87b56dd1461067d578063cf89fa03146106ba578063d1deba1f146106d6576101f8565b806395d89b41116100dc57806395d89b41146105aa57806395f4eda7146105d5578063a22cb46514610600578063b2bdfa7b14610629576101f8565b806375794a3c146104ed5780638da5cb5b146105185780638ee7491214610543578063943fb87214610581576101f8565b806340d0b4a9116101905780636ecd23061161015f5780636ecd23061461041557806370a0823114610431578063715018a61461046e5780637501f741146104855780637533d788146104b0576101f8565b806340d0b4a91461036f57806342842e0e1461038657806355f804b3146103af5780636352211e146103d8576101f8565b8063095ea7b3116101cc578063095ea7b3146102cb5780631c37a822146102f457806323b872dd1461031d5780632e1a7d4d14610346576101f8565b80621d3567146101fd57806301ffc9a71461022657806306fdde0314610263578063081812fc1461028e575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190613505565b6107b6565b005b34801561023257600080fd5b5061024d600480360381019061024891906132be565b6109f8565b60405161025a9190613d87565b60405180910390f35b34801561026f57600080fd5b50610278610ada565b6040516102859190613dc4565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906135e4565b610b6c565b6040516102c29190613cf7565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061327e565b610bf1565b005b34801561030057600080fd5b5061031b60048036038101906103169190613505565b610d09565b005b34801561032957600080fd5b50610344600480360381019061033f9190613168565b610d89565b005b34801561035257600080fd5b5061036d600480360381019061036891906135e4565b610de9565b005b34801561037b57600080fd5b50610384610f37565b005b34801561039257600080fd5b506103ad60048036038101906103a89190613168565b610fd0565b005b3480156103bb57600080fd5b506103d660048036038101906103d19190613318565b610ff0565b005b3480156103e457600080fd5b506103ff60048036038101906103fa91906135e4565b611082565b60405161040c9190613cf7565b60405180910390f35b61042f600480360381019061042a9190613651565b611134565b005b34801561043d57600080fd5b50610458600480360381019061045391906130bb565b61125f565b6040516104659190614220565b60405180910390f35b34801561047a57600080fd5b50610483611317565b005b34801561049157600080fd5b5061049a61139f565b6040516104a79190614220565b60405180910390f35b3480156104bc57600080fd5b506104d760048036038101906104d29190613365565b6113c3565b6040516104e49190613da2565b60405180910390f35b3480156104f957600080fd5b50610502611463565b60405161050f9190614220565b60405180910390f35b34801561052457600080fd5b5061052d611469565b60405161053a9190613cf7565b60405180910390f35b34801561054f57600080fd5b5061056a600480360381019061056591906133f2565b611492565b60405161057892919061423b565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a391906135e4565b6114e6565b005b3480156105b657600080fd5b506105bf61156c565b6040516105cc9190613dc4565b60405180910390f35b3480156105e157600080fd5b506105ea6115fe565b6040516105f79190614220565b60405180910390f35b34801561060c57600080fd5b506106276004803603810190610622919061323e565b611604565b005b34801561063557600080fd5b5061063e61161a565b60405161064b9190613cf7565b60405180910390f35b34801561066057600080fd5b5061067b600480360381019061067691906131bb565b611640565b005b34801561068957600080fd5b506106a4600480360381019061069f91906135e4565b6116a2565b6040516106b19190613dc4565b60405180910390f35b6106d460048036038101906106cf91906135a4565b611763565b005b6106f060048036038101906106eb9190613461565b611a60565b005b3480156106fe57600080fd5b5061071960048036038101906107149190613128565b611c00565b6040516107269190613d87565b60405180910390f35b34801561073b57600080fd5b5061075660048036038101906107519190613392565b611c94565b005b610760611d40565b005b34801561076e57600080fd5b50610789600480360381019061078491906130bb565b611d42565b005b34801561079757600080fd5b506107a0611e3a565b6040516107ad9190614220565b60405180910390f35b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081057600080fd5b600960008561ffff1661ffff168152602001908152602001600020805461083690614562565b9050835114801561087c5750600960008561ffff1661ffff16815260200190815260200160002060405161086a9190613c7b565b60405180910390208380519060200120145b6108bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b290613fc6565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16631c37a822858585856040518563ffffffff1660e01b81526004016108fa9493929190614157565b600060405180830381600087803b15801561091457600080fd5b505af1925050508015610925575060015b6109f1576040518060400160405280825181526020018280519060200120815250600860008661ffff1661ffff1681526020019081526020016000208460405161096f9190613c64565b908152602001604051809103902060008467ffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d848484846040516109e49493929190614157565b60405180910390a16109f2565b5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ac357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610ad35750610ad282611e40565b5b9050919050565b606060018054610ae990614562565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1590614562565b8015610b625780601f10610b3757610100808354040283529160200191610b62565b820191906000526020600020905b815481529060010190602001808311610b4557829003601f168201915b5050505050905090565b6000610b7782611eaa565b610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90613f86565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610bfc82611082565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6490614006565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c8c611f16565b73ffffffffffffffffffffffffffffffffffffffff161480610cbb5750610cba81610cb5611f16565b611c00565b5b610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613ee6565b60405180910390fd5b610d048383611f1e565b505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6e90613f46565b60405180910390fd5b610d8384848484611fd7565b50505050565b610d9a610d94611f16565b82612004565b610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd090614026565b60405180910390fd5b610de48383836120e2565b505050565b610df1611f16565b73ffffffffffffffffffffffffffffffffffffffff16610e0f611469565b73ffffffffffffffffffffffffffffffffffffffff1614610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c90613fa6565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ead90613cb6565b60006040518083038185875af1925050503d8060008114610eea576040519150601f19603f3d011682016040523d82523d6000602084013e610eef565b606091505b5050905080610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90614066565b60405180910390fd5b5050565b610f3f611f16565b73ffffffffffffffffffffffffffffffffffffffff16610f5d611469565b73ffffffffffffffffffffffffffffffffffffffff1614610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90613fa6565b60405180910390fd5b6001600f60006101000a81548160ff021916908315150217905550565b610feb83838360405180602001604052806000815250611640565b505050565b610ff8611f16565b73ffffffffffffffffffffffffffffffffffffffff16611016611469565b73ffffffffffffffffffffffffffffffffffffffff161461106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106390613fa6565b60405180910390fd5b8181600b919061107d929190612da4565b505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561112b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112290613f26565b60405180910390fd5b80915050919050565b600d548160ff1611156111825780600d546040517fceff16fc00000000000000000000000000000000000000000000000000000000815260040161117992919061428d565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160ff16600c546111b491906143a6565b1061121c5780600c547f00000000000000000000000000000000000000000000000000000000000000006040517f72ee72a5000000000000000000000000000000000000000000000000000000008152600401611213939291906142b6565b60405180910390fd5b60005b8160ff1681101561125b5761124833600c6000815461123d906145c5565b919050819055612349565b8080611253906145c5565b91505061121f565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c790613f06565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61131f611f16565b73ffffffffffffffffffffffffffffffffffffffff1661133d611469565b73ffffffffffffffffffffffffffffffffffffffff1614611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a90613fa6565b60405180910390fd5b61139d6000612367565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600960205280600052604060002060009150905080546113e290614562565b80601f016020809104026020016040519081016040528092919081815260200182805461140e90614562565b801561145b5780601f106114305761010080835404028352916020019161145b565b820191906000526020600020905b81548152906001019060200180831161143e57829003601f168201915b505050505081565b600c5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60086020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010154905082565b6114ee611f16565b73ffffffffffffffffffffffffffffffffffffffff1661150c611469565b73ffffffffffffffffffffffffffffffffffffffff1614611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990613fa6565b60405180910390fd5b80600e8190555050565b60606002805461157b90614562565b80601f01602080910402602001604051908101604052809291908181526020018280546115a790614562565b80156115f45780601f106115c9576101008083540402835291602001916115f4565b820191906000526020600020905b8154815290600101906020018083116115d757829003601f168201915b5050505050905090565b600d5481565b61161661160f611f16565b838361242b565b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61165161164b611f16565b83612004565b611690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168790614026565b60405180910390fd5b61169c84848484612598565b50505050565b606060011515600f60009054906101000a900460ff16151514156116d0576116c9826125f4565b905061175e565b601080546116dd90614562565b80601f016020809104026020016040519081016040528092919081815260200182805461170990614562565b80156117565780601f1061172b57610100808354040283529160200191611756565b820191906000526020600020905b81548152906001019060200180831161173957829003601f168201915b505050505090505b919050565b8061176d81611082565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117dc57336040517fef1d23930000000000000000000000000000000000000000000000000000000081526004016117d39190613cf7565b60405180910390fd5b6000600960008561ffff1661ffff168152602001908152602001600020805461180490614562565b9050141561184957826040517f12263be10000000000000000000000000000000000000000000000000000000081526004016118409190614086565b60405180910390fd5b6118528261269b565b60003383604051602001611867929190613d5e565b6040516020818303038152906040529050600060019050600081600e54604051602001611895929190613ccb565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340a7bb108830876000876040518663ffffffff1660e01b815260040161190c9594939291906140a1565b604080518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190613611565b5090508034116119a45734816040517f955eeb6900000000000000000000000000000000000000000000000000000000815260040161199b929190614264565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003489600960008c61ffff1661ffff16815260200190815260200160002088336000896040518863ffffffff1660e01b8152600401611a25969594939291906141aa565b6000604051808303818588803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050505050505050505050565b6000600860008761ffff1661ffff16815260200190815260200160002085604051611a8b9190613c64565b908152602001604051809103902060008567ffffffffffffffff16815260200190815260200160002090506000801b81600101541415611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af790614046565b60405180910390fd5b806000015483839050148015611b30575080600101548383604051611b26929190613c4b565b6040518091039020145b611b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6690613ea6565b60405180910390fd5b600081600001819055506000801b81600101819055503073ffffffffffffffffffffffffffffffffffffffff16631c37a82287878787876040518663ffffffff1660e01b8152600401611bc6959493929190614102565b600060405180830381600087803b158015611be057600080fd5b505af1158015611bf4573d6000803e3d6000fd5b50505050505050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c9c611f16565b73ffffffffffffffffffffffffffffffffffffffff16611cba611469565b73ffffffffffffffffffffffffffffffffffffffff1614611d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0790613fa6565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190611d3a929190612e2a565b50505050565b565b611d4a611f16565b73ffffffffffffffffffffffffffffffffffffffff16611d68611469565b73ffffffffffffffffffffffffffffffffffffffff1614611dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db590613fa6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2590613e06565b60405180910390fd5b611e3781612367565b50565b600e5481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f9183611082565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008082806020019051810190611fee91906130e8565b91509150611ffc8282612349565b505050505050565b600061200f82611eaa565b61204e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204590613ec6565b60405180910390fd5b600061205983611082565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061209b575061209a8185611c00565b5b806120d957508373ffffffffffffffffffffffffffffffffffffffff166120c184610b6c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210282611082565b73ffffffffffffffffffffffffffffffffffffffff1614612158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214f90613e26565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bf90613e66565b60405180910390fd5b6121d38383836127b8565b6121de600082611f1e565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461222e919061442d565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228591906143a6565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123448383836127bd565b505050565b6123638282604051806020016040528060008152506127c2565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190613e86565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161258b9190613d87565b60405180910390a3505050565b6125a38484846120e2565b6125af8484848461281d565b6125ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e590613de6565b60405180910390fd5b50505050565b60606125ff82611eaa565b61263e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263590613fe6565b60405180910390fd5b60006126486129b4565b905060008151116126685760405180602001604052806000815250612693565b8061267284612a46565b604051602001612683929190613c92565b6040516020818303038152906040525b915050919050565b60006126a682611082565b90506126b4816000846127b8565b6126bf600083611f1e565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270f919061442d565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127b4816000846127bd565b5050565b505050565b505050565b6127cc8383612ba7565b6127d9600084848461281d565b612818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280f90613de6565b60405180910390fd5b505050565b600061283e8473ffffffffffffffffffffffffffffffffffffffff16612d81565b156129a7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612867611f16565b8786866040518563ffffffff1660e01b81526004016128899493929190613d12565b602060405180830381600087803b1580156128a357600080fd5b505af19250505080156128d457506040513d601f19601f820116820180604052508101906128d191906132eb565b60015b612957573d8060008114612904576040519150601f19603f3d011682016040523d82523d6000602084013e612909565b606091505b5060008151141561294f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294690613de6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129ac565b600190505b949350505050565b6060600b80546129c390614562565b80601f01602080910402602001604051908101604052809291908181526020018280546129ef90614562565b8015612a3c5780601f10612a1157610100808354040283529160200191612a3c565b820191906000526020600020905b815481529060010190602001808311612a1f57829003601f168201915b5050505050905090565b60606000821415612a8e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ba2565b600082905060005b60008214612ac0578080612aa9906145c5565b915050600a82612ab991906143fc565b9150612a96565b60008167ffffffffffffffff811115612adc57612adb614717565b5b6040519080825280601f01601f191660200182016040528015612b0e5781602001600182028036833780820191505090505b5090505b60008514612b9b57600182612b27919061442d565b9150600a85612b36919061462a565b6030612b4291906143a6565b60f81b818381518110612b5857612b576146e8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b9491906143fc565b9450612b12565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0e90613f66565b60405180910390fd5b612c2081611eaa565b15612c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5790613e46565b60405180910390fd5b612c6c600083836127b8565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cbc91906143a6565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d7d600083836127bd565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612db090614562565b90600052602060002090601f016020900481019282612dd25760008555612e19565b82601f10612deb57803560ff1916838001178555612e19565b82800160010185558215612e19579182015b82811115612e18578235825591602001919060010190612dfd565b5b509050612e269190612eb0565b5090565b828054612e3690614562565b90600052602060002090601f016020900481019282612e585760008555612e9f565b82601f10612e7157803560ff1916838001178555612e9f565b82800160010185558215612e9f579182015b82811115612e9e578235825591602001919060010190612e83565b5b509050612eac9190612eb0565b5090565b5b80821115612ec9576000816000905550600101612eb1565b5090565b6000612ee0612edb84614312565b6142ed565b905082815260208101848484011115612efc57612efb614755565b5b612f07848285614520565b509392505050565b600081359050612f1e81614d1c565b92915050565b600081519050612f3381614d33565b92915050565b600081359050612f4881614d4a565b92915050565b600081359050612f5d81614d61565b92915050565b600081519050612f7281614d61565b92915050565b60008083601f840112612f8e57612f8d61474b565b5b8235905067ffffffffffffffff811115612fab57612faa614746565b5b602083019150836001820283011115612fc757612fc6614750565b5b9250929050565b600082601f830112612fe357612fe261474b565b5b8135612ff3848260208601612ecd565b91505092915050565b60008083601f8401126130125761301161474b565b5b8235905067ffffffffffffffff81111561302f5761302e614746565b5b60208301915083600182028301111561304b5761304a614750565b5b9250929050565b60008135905061306181614d78565b92915050565b60008135905061307681614d8f565b92915050565b60008151905061308b81614d8f565b92915050565b6000813590506130a081614da6565b92915050565b6000813590506130b581614dbd565b92915050565b6000602082840312156130d1576130d061475f565b5b60006130df84828501612f0f565b91505092915050565b600080604083850312156130ff576130fe61475f565b5b600061310d85828601612f24565b925050602061311e8582860161307c565b9150509250929050565b6000806040838503121561313f5761313e61475f565b5b600061314d85828601612f0f565b925050602061315e85828601612f0f565b9150509250929050565b6000806000606084860312156131815761318061475f565b5b600061318f86828701612f0f565b93505060206131a086828701612f0f565b92505060406131b186828701613067565b9150509250925092565b600080600080608085870312156131d5576131d461475f565b5b60006131e387828801612f0f565b94505060206131f487828801612f0f565b935050604061320587828801613067565b925050606085013567ffffffffffffffff8111156132265761322561475a565b5b61323287828801612fce565b91505092959194509250565b600080604083850312156132555761325461475f565b5b600061326385828601612f0f565b925050602061327485828601612f39565b9150509250929050565b600080604083850312156132955761329461475f565b5b60006132a385828601612f0f565b92505060206132b485828601613067565b9150509250929050565b6000602082840312156132d4576132d361475f565b5b60006132e284828501612f4e565b91505092915050565b6000602082840312156133015761330061475f565b5b600061330f84828501612f63565b91505092915050565b6000806020838503121561332f5761332e61475f565b5b600083013567ffffffffffffffff81111561334d5761334c61475a565b5b61335985828601612ffc565b92509250509250929050565b60006020828403121561337b5761337a61475f565b5b600061338984828501613052565b91505092915050565b6000806000604084860312156133ab576133aa61475f565b5b60006133b986828701613052565b935050602084013567ffffffffffffffff8111156133da576133d961475a565b5b6133e686828701612f78565b92509250509250925092565b60008060006060848603121561340b5761340a61475f565b5b600061341986828701613052565b935050602084013567ffffffffffffffff81111561343a5761343961475a565b5b61344686828701612fce565b925050604061345786828701613067565b9150509250925092565b60008060008060006080868803121561347d5761347c61475f565b5b600061348b88828901613052565b955050602086013567ffffffffffffffff8111156134ac576134ab61475a565b5b6134b888828901612fce565b94505060406134c988828901613091565b935050606086013567ffffffffffffffff8111156134ea576134e961475a565b5b6134f688828901612f78565b92509250509295509295909350565b6000806000806080858703121561351f5761351e61475f565b5b600061352d87828801613052565b945050602085013567ffffffffffffffff81111561354e5761354d61475a565b5b61355a87828801612fce565b935050604061356b87828801613091565b925050606085013567ffffffffffffffff81111561358c5761358b61475a565b5b61359887828801612fce565b91505092959194509250565b600080604083850312156135bb576135ba61475f565b5b60006135c985828601613052565b92505060206135da85828601613067565b9150509250929050565b6000602082840312156135fa576135f961475f565b5b600061360884828501613067565b91505092915050565b600080604083850312156136285761362761475f565b5b60006136368582860161307c565b92505060206136478582860161307c565b9150509250929050565b6000602082840312156136675761366661475f565b5b6000613675848285016130a6565b91505092915050565b61368781614473565b82525050565b61369681614461565b82525050565b6136a581614485565b82525050565b6136b481614491565b82525050565b60006136c6838561436e565b93506136d3838584614520565b6136dc83614764565b840190509392505050565b60006136f3838561437f565b9350613700838584614520565b82840190509392505050565b600061371782614358565b613721818561436e565b935061373181856020860161452f565b61373a81614764565b840191505092915050565b600061375082614358565b61375a818561437f565b935061376a81856020860161452f565b80840191505092915050565b6000815461378381614562565b61378d818661436e565b945060018216600081146137a857600181146137ba576137ed565b60ff19831686526020860193506137ed565b6137c385614343565b60005b838110156137e5578154818901526001820191506020810190506137c6565b808801955050505b50505092915050565b6000815461380381614562565b61380d818661437f565b9450600182166000811461382857600181146138395761386c565b60ff1983168652818601935061386c565b61384285614343565b60005b8381101561386457815481890152600182019150602081019050613845565b838801955050505b50505092915050565b600061388082614363565b61388a818561438a565b935061389a81856020860161452f565b6138a381614764565b840191505092915050565b60006138b982614363565b6138c3818561439b565b93506138d381856020860161452f565b80840191505092915050565b60006138ec60328361438a565b91506138f782614782565b604082019050919050565b600061390f60268361438a565b915061391a826147d1565b604082019050919050565b600061393260258361438a565b915061393d82614820565b604082019050919050565b6000613955601c8361438a565b91506139608261486f565b602082019050919050565b600061397860248361438a565b915061398382614898565b604082019050919050565b600061399b60198361438a565b91506139a6826148e7565b602082019050919050565b60006139be601a8361438a565b91506139c982614910565b602082019050919050565b60006139e1602c8361438a565b91506139ec82614939565b604082019050919050565b6000613a0460388361438a565b9150613a0f82614988565b604082019050919050565b6000613a27602a8361438a565b9150613a32826149d7565b604082019050919050565b6000613a4a60298361438a565b9150613a5582614a26565b604082019050919050565b6000613a6d602b8361438a565b9150613a7882614a75565b604082019050919050565b6000613a9060208361438a565b9150613a9b82614ac4565b602082019050919050565b6000613ab3602c8361438a565b9150613abe82614aed565b604082019050919050565b6000613ad660208361438a565b9150613ae182614b3c565b602082019050919050565b6000613af960348361438a565b9150613b0482614b65565b604082019050919050565b6000613b1c602f8361438a565b9150613b2782614bb4565b604082019050919050565b6000613b3f60218361438a565b9150613b4a82614c03565b604082019050919050565b6000613b6260008361437f565b9150613b6d82614c52565b600082019050919050565b6000613b8560318361438a565b9150613b9082614c55565b604082019050919050565b6000613ba860268361438a565b9150613bb382614ca4565b604082019050919050565b6000613bcb601c8361438a565b9150613bd682614cf3565b602082019050919050565b613bea816144c7565b82525050565b613c01613bfc826144c7565b61460e565b82525050565b613c10816144f5565b82525050565b613c27613c22826144f5565b614620565b82525050565b613c36816144ff565b82525050565b613c4581614513565b82525050565b6000613c588284866136e7565b91508190509392505050565b6000613c708284613745565b915081905092915050565b6000613c8782846137f6565b915081905092915050565b6000613c9e82856138ae565b9150613caa82846138ae565b91508190509392505050565b6000613cc182613b55565b9150819050919050565b6000613cd78285613bf0565b600282019150613ce78284613c16565b6020820191508190509392505050565b6000602082019050613d0c600083018461368d565b92915050565b6000608082019050613d27600083018761368d565b613d34602083018661368d565b613d416040830185613c07565b8181036060830152613d53818461370c565b905095945050505050565b6000604082019050613d73600083018561368d565b613d806020830184613c07565b9392505050565b6000602082019050613d9c600083018461369c565b92915050565b60006020820190508181036000830152613dbc818461370c565b905092915050565b60006020820190508181036000830152613dde8184613875565b905092915050565b60006020820190508181036000830152613dff816138df565b9050919050565b60006020820190508181036000830152613e1f81613902565b9050919050565b60006020820190508181036000830152613e3f81613925565b9050919050565b60006020820190508181036000830152613e5f81613948565b9050919050565b60006020820190508181036000830152613e7f8161396b565b9050919050565b60006020820190508181036000830152613e9f8161398e565b9050919050565b60006020820190508181036000830152613ebf816139b1565b9050919050565b60006020820190508181036000830152613edf816139d4565b9050919050565b60006020820190508181036000830152613eff816139f7565b9050919050565b60006020820190508181036000830152613f1f81613a1a565b9050919050565b60006020820190508181036000830152613f3f81613a3d565b9050919050565b60006020820190508181036000830152613f5f81613a60565b9050919050565b60006020820190508181036000830152613f7f81613a83565b9050919050565b60006020820190508181036000830152613f9f81613aa6565b9050919050565b60006020820190508181036000830152613fbf81613ac9565b9050919050565b60006020820190508181036000830152613fdf81613aec565b9050919050565b60006020820190508181036000830152613fff81613b0f565b9050919050565b6000602082019050818103600083015261401f81613b32565b9050919050565b6000602082019050818103600083015261403f81613b78565b9050919050565b6000602082019050818103600083015261405f81613b9b565b9050919050565b6000602082019050818103600083015261407f81613bbe565b9050919050565b600060208201905061409b6000830184613be1565b92915050565b600060a0820190506140b66000830188613be1565b6140c3602083018761368d565b81810360408301526140d5818661370c565b90506140e4606083018561369c565b81810360808301526140f6818461370c565b90509695505050505050565b60006080820190506141176000830188613be1565b8181036020830152614129818761370c565b90506141386040830186613c2d565b818103606083015261414b8184866136ba565b90509695505050505050565b600060808201905061416c6000830187613be1565b818103602083015261417e818661370c565b905061418d6040830185613c2d565b818103606083015261419f818461370c565b905095945050505050565b600060c0820190506141bf6000830189613be1565b81810360208301526141d18188613776565b905081810360408301526141e5818761370c565b90506141f4606083018661367e565b614201608083018561368d565b81810360a0830152614213818461370c565b9050979650505050505050565b60006020820190506142356000830184613c07565b92915050565b60006040820190506142506000830185613c07565b61425d60208301846136ab565b9392505050565b60006040820190506142796000830185613c07565b6142866020830184613c07565b9392505050565b60006040820190506142a26000830185613c3c565b6142af6020830184613c07565b9392505050565b60006060820190506142cb6000830186613c3c565b6142d86020830185613c07565b6142e56040830184613c07565b949350505050565b60006142f7614308565b90506143038282614594565b919050565b6000604051905090565b600067ffffffffffffffff82111561432d5761432c614717565b5b61433682614764565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006143b1826144f5565b91506143bc836144f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143f1576143f061465b565b5b828201905092915050565b6000614407826144f5565b9150614412836144f5565b9250826144225761442161468a565b5b828204905092915050565b6000614438826144f5565b9150614443836144f5565b9250828210156144565761445561465b565b5b828203905092915050565b600061446c826144d5565b9050919050565b600061447e826144d5565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561454d578082015181840152602081019050614532565b8381111561455c576000848401525b50505050565b6000600282049050600182168061457a57607f821691505b6020821081141561458e5761458d6146b9565b5b50919050565b61459d82614764565b810181811067ffffffffffffffff821117156145bc576145bb614717565b5b80604052505050565b60006145d0826144f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156146035761460261465b565b5b600182019050919050565b600061461982614775565b9050919050565b6000819050919050565b6000614635826144f5565b9150614640836144f5565b9250826146505761464f61468a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4c617965725a65726f3a20696e76616c6964207061796c6f6164000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a2063616c6c6572206d75737460008201527f206265204272696467652e000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f6e626c6f636b696e6752656365697665723a20696e76616c696420736f7560008201527f7263652073656e64696e6720636f6e7472616374000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f6e626c6f636b696e6752656365697665723a206e6f2073746f726564206d60008201527f6573736167650000000000000000000000000000000000000000000000000000602082015250565b7f47473a204661696c656420746f20776974686472617720457468657200000000600082015250565b614d2581614461565b8114614d3057600080fd5b50565b614d3c81614473565b8114614d4757600080fd5b50565b614d5381614485565b8114614d5e57600080fd5b50565b614d6a8161449b565b8114614d7557600080fd5b50565b614d81816144c7565b8114614d8c57600080fd5b50565b614d98816144f5565b8114614da357600080fd5b50565b614daf816144ff565b8114614dba57600080fd5b50565b614dc681614513565b8114614dd157600080fd5b5056fea26469706673582212209f93d1b1d260112dfb63ff172be14c69fd239f563f034667538e86f396dcd35364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1699,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "endpoint",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILayerZeroEndpoint)2506"
      },
      {
        "astId": 1713,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)))"
      },
      {
        "astId": 1717,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1982,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1984,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 1986,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1991,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "mintLimitPerTxn",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1994,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "gasForDestinationLzReceive",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1997,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "revealed",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 1999,
        "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
        "label": "revealUrl",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)2506": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => struct NonblockingReceiver.FailedMessages)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_struct(FailedMessages)1704_storage))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(FailedMessages)1704_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NonblockingReceiver.FailedMessages)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedMessages)1704_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FailedMessages)1704_storage": {
        "encoding": "inplace",
        "label": "struct NonblockingReceiver.FailedMessages",
        "members": [
          {
            "astId": 1701,
            "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
            "label": "payloadLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1703,
            "contract": "contracts/OmniTestNFT.sol:OmniTestNFT",
            "label": "payloadHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}